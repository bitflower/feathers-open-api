{
  "openapi": "3.0.1",
  "info": { "title": "cpo-csms-web-backend-service", "version": "v1" },
  "servers": [
    {
      "url": "https://p3dev.cpo-csms-web.energystacks.io/cpo-csms-web/v1",
      "description": "Generated server url"
    }
  ],
  "security": [{ "bearerAuth": [] }],
  "tags": [
    {
      "name": "Mobility Token",
      "description": "Mobility token provided by the Central System to the Charging Station for the purpose of identifying the initiator of charging activity"
    }
  ],
  "paths": {
    "/users/{userId}": {
      "put": {
        "tags": ["User"],
        "summary": "Update user",
        "description": "Activates or deactivates an user account and assigns a role",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateUserRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ExtendedCsmsUserDto" }
              }
            }
          },
          "403": {
            "description": "Forbidden - User cannot change his own role"
          },
          "404": { "description": "Provider ID not found" },
          "401": { "description": "Unauthorized - no credentials provided" }
        }
      }
    },
    "/tokens/{uid}": {
      "get": {
        "tags": ["Mobility Token"],
        "summary": "Get a mobility token",
        "description": "Returns a mobility token with the specific UID. If User is not SUPER_ADMIN, then filter by Provider ID is applied.",
        "operationId": "getTokenByUid",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Token" }
              }
            }
          },
          "403": { "description": "Forbidden" },
          "404": { "description": "Mobility token not found" }
        }
      },
      "put": {
        "tags": ["Mobility Token"],
        "summary": "Update a mobility token",
        "description": "Update an existing mobility token, filtered by Provider ID.",
        "operationId": "updateToken",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CsmsTokenUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Token" }
              }
            }
          },
          "400": {
            "description": "Bad Request - Expiry date exceeded max value",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Token" }
              }
            }
          },
          "404": { "description": "Mobility token not found" },
          "403": { "description": "Forbidden" }
        }
      },
      "delete": {
        "tags": ["Mobility Token"],
        "summary": "Delete a mobility token",
        "description": "Delete an existing mobility token, filtered by Provider ID.",
        "operationId": "deleteToken",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Token" }
              }
            }
          },
          "403": { "description": "Forbidden" },
          "404": { "description": "Mobility token not found" },
          "409": { "description": "Mobility token is softly deleted" }
        }
      }
    },
    "/providers/{providerName}": {
      "get": {
        "tags": ["Provider"],
        "summary": "Get Provider by provider name",
        "description": "Returns a Provider that matches with the provider name",
        "operationId": "getProviderByProviderName",
        "parameters": [
          {
            "name": "providerName",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CsmsProviderDto" }
              }
            }
          },
          "404": { "description": "Provider Not Found" }
        }
      },
      "put": {
        "tags": ["Provider"],
        "summary": "Update Provider",
        "description": "Update a Provider and save it to database",
        "operationId": "updateProviderByProviderName",
        "parameters": [
          {
            "name": "providerName",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CsmsProviderUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CsmsProviderDto" }
              }
            }
          },
          "404": { "description": "Provider Not Found" },
          "409": { "description": "Provider name already exists" }
        }
      },
      "delete": {
        "tags": ["Provider"],
        "summary": "Delete Provider by provider name",
        "description": "Delete a Provider that matches with the provider name",
        "operationId": "deleteProviderByProviderName",
        "parameters": [
          {
            "name": "providerName",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessMessageDto" }
              }
            }
          },
          "404": {
            "description": "Cannot delete provider with assigned users."
          }
        }
      }
    },
    "/locations/{locationId}": {
      "get": {
        "tags": ["Locations"],
        "summary": "Get one Location and its Charging Station Groups",
        "description": "Returns the requested Location  with its Charging Station Group(s), filter by User's Provider ID for CPO_ADMIN & CPO_USER. If User Role  is SUPER_ADMIN, then no filter is applied.",
        "operationId": "getLocationById",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocationAndChargingStationGroups"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not SUPER ADMIN and has no Provider ID",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LocationAndChargingStationGroups"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Locations"],
        "summary": "Update location",
        "description": "Update a location and save it to database",
        "operationId": "updateLocation",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/LocationUpdateRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargingStationLocation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Not valid period begin and end time"
          },
          "404": { "description": "Not Found" },
          "409": { "description": "Conflict - Not valid opening times" },
          "403": { "description": "Forbidden" }
        }
      },
      "delete": {
        "tags": ["Locations"],
        "summary": "Delete a location",
        "description": "Delete location if there are no charging stations connected to it and the charging station groups inside the locations",
        "operationId": "removeLocation",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargingStationLocation"
                }
              }
            }
          },
          "404": {
            "description": "Requested Location was not found, for this Provider ID."
          },
          "409": {
            "description": "Conflict - Group has connected Charging Stations"
          }
        }
      }
    },
    "/chargingstations/{identityKey}": {
      "get": {
        "tags": ["Charging Stations"],
        "summary": "Get Charging Station",
        "description": "Returns Charging Station with the specified identity key containing fields from all 3 services (svc-ocpp-broker, svc-ocpp-server & svc-chargingstation)",
        "operationId": "getChargingStation",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CsmsChargingStation" }
              }
            }
          },
          "404": { "description": "Charging Station not found" },
          "403": { "description": "Forbidden" }
        }
      },
      "put": {
        "tags": ["Charging Stations"],
        "summary": "Update Charging Station",
        "description": "Update Charging Station in the 3 services (svc-ocpp-server, svc-chargingstation & svc-ocpp-broker (if exists))",
        "operationId": "updateChargingStation",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CsmsChargingStationUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CsmsChargingStation" }
              }
            }
          },
          "404": { "description": "Charging Station not found" },
          "409": { "description": "Charging Station already exists" },
          "403": { "description": "Forbidden" }
        }
      },
      "delete": {
        "tags": ["Charging Stations"],
        "summary": "Delete Charging Station",
        "description": "Delete Charging Station with the specific identityKey from the 3 services (svc-ocpp-server, svc-chargingstation & svc-ocpp-broker (if exists))",
        "operationId": "deleteChargingStation",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessMessageDto" }
              }
            }
          },
          "404": { "description": "Charging Station not found" },
          "403": { "description": "Forbidden" }
        }
      }
    },
    "/chargingstations/{chargingStationId}/evses/{evseId}": {
      "get": {
        "tags": ["EVSEs"],
        "summary": "Get EVSE",
        "description": "Returns EVSE with the specific EVSE ID",
        "operationId": "getEvseById",
        "parameters": [
          {
            "name": "evseId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "chargingStationId",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Evse" }
              }
            }
          },
          "404": { "description": "EVSE not found" }
        }
      },
      "put": {
        "tags": ["EVSEs"],
        "summary": "Update EVSE",
        "description": "Returns the updated EVSE",
        "operationId": "updateEvse",
        "parameters": [
          {
            "name": "evseId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "chargingStationId",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/EvseUpdateRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Evse" }
              }
            }
          },
          "404": { "description": "EVSE not found" }
        }
      },
      "delete": {
        "tags": ["EVSEs"],
        "summary": "Delete EVSE",
        "description": "Delete EVSE with the specific EVSE Id",
        "operationId": "deleteEvse",
        "parameters": [
          {
            "name": "evseId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "chargingStationId",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Evse" }
              }
            }
          },
          "404": { "description": "EVSE not found" }
        }
      }
    },
    "/chargingstation-groups/{chargingStationGroupUuid}": {
      "put": {
        "tags": ["Charging Station Groups"],
        "summary": "Update a Charging Station Group",
        "description": "Updates Charging Station Group Name. Must be unique per Location. Filter for Provider ID is applied.",
        "operationId": "updateChargingStationGroup",
        "parameters": [
          {
            "name": "chargingStationGroupUuid",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChargingStationGroupUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargingStationGroup"
                }
              }
            }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Forbidden - User has no Provider ID" },
          "404": { "description": "Charging Station Group not found" },
          "409": { "description": "Charging Station Group name not unique" }
        }
      },
      "delete": {
        "tags": ["Charging Station Groups"],
        "summary": "Delete Charging Station Group",
        "description": "Delete a Charging Station Group by its UUID, filtered by ProviderID.",
        "operationId": "deleteChargingStationGroup",
        "parameters": [
          {
            "name": "chargingStationGroupUuid",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChargingStationGroup"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Location must have at least one Group"
          },
          "403": { "description": "Forbidden - User has no Provider ID" },
          "404": { "description": "Charging Station Group Not Found" },
          "409": {
            "description": "Conflict - Group has connected Charging Stations"
          }
        }
      }
    },
    "/broker/csms/{uuid}": {
      "get": {
        "tags": ["CSMS"],
        "summary": "Get one specific CSMS",
        "description": "Get one specific CSMS, searched by its uuid",
        "operationId": "getCsms",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Csms" }
              }
            }
          },
          "404": { "description": "CSMS not found" }
        }
      },
      "put": {
        "tags": ["CSMS"],
        "summary": "Update a CSMS",
        "description": "Update an existing CSMS",
        "operationId": "updateCsms",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The UUID of the CSMS",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CsmsUpdateRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Csms" }
              }
            }
          },
          "404": { "description": "CSMS not found" },
          "409": {
            "description": "CSMS cannot be updated. Provided display name is not unique"
          },
          "400": {
            "description": "CSMS cannot be updated. Default CSMS cannot change to not default"
          }
        }
      },
      "delete": {
        "tags": ["CSMS"],
        "summary": "Delete a CSMS",
        "description": "Delete CSMS if there are no charging stations connected to it and if it is not  the default one",
        "operationId": "deleteCsms",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The UUID of the CSMS",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessMessageDto" }
              }
            }
          },
          "404": { "description": "CSMS not found" },
          "409": {
            "description": "CSMS cannot be deleted, when there are connected charging stations to it"
          },
          "400": {
            "description": "Default CSMS can be deleted only when it is the only one that exists and with no connected CS to it"
          }
        }
      }
    },
    "/users/me/access": {
      "post": {
        "tags": ["User"],
        "summary": "Request access",
        "description": "Requests access for the current user",
        "operationId": "requestAccess",
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessMessageDto" }
              }
            }
          },
          "404": { "description": "The user account was not found" },
          "409": { "description": "The user already requested access before" },
          "401": { "description": "Unauthorized - no credentials provided" }
        }
      }
    },
    "/tokens": {
      "get": {
        "tags": ["Mobility Token"],
        "summary": "Get all mobility tokens",
        "description": "Returns a list of all mobility tokens. If User is not SUPER_ADMIN, then filter by Provider ID is applied.",
        "operationId": "getAllTokens",
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Token" }
                }
              }
            }
          },
          "403": { "description": "Forbidden" }
        }
      },
      "post": {
        "tags": ["Mobility Token"],
        "summary": "Create a mobility token",
        "description": "Create a new mobility token, for a specific Provider.",
        "operationId": "createToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CsmsTokenCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Token" }
              }
            }
          },
          "400": {
            "description": "Bad Request - Expiry date exceeded max value",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Token" }
              }
            }
          },
          "403": { "description": "Forbidden" },
          "409": {
            "description": "Conflict - Token already exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Token" }
              }
            }
          }
        }
      }
    },
    "/providers": {
      "get": {
        "tags": ["Provider"],
        "summary": "Get all providers",
        "description": "Returns a list of all providers ",
        "operationId": "getAllProviders",
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/CsmsProviderDto" }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Provider"],
        "summary": "Create provider",
        "description": "Creates a new provider",
        "operationId": "createProvider",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CsmsProviderCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CsmsProviderDto" }
              }
            }
          },
          "400": { "description": "Provider Country Code not valid" },
          "409": { "description": "Provider name already exists" }
        }
      }
    },
    "/management/chargingstations/{identityKey}/unlockConnector": {
      "post": {
        "tags": ["Charging Station Management"],
        "summary": "Unlock Connector",
        "description": "Sends an unlock connector request to the charging station",
        "operationId": "unlockConnector",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnlockConnectorRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnlockConnectorConfirmation"
                }
              }
            }
          },
          "404": { "description": "Charging station not found" },
          "504": {
            "description": "RPC Timeout. The charging station did not respond in time."
          }
        }
      }
    },
    "/management/chargingstations/{identityKey}/reset": {
      "post": {
        "tags": ["Charging Station Management"],
        "summary": "Reset",
        "description": "Sends a reset request to the charging station",
        "operationId": "reset",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ResetRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ResetConfirmation" }
              }
            }
          },
          "404": { "description": "Charging station not found" },
          "504": {
            "description": "RPC Timeout. The charging station did not respond in time."
          }
        }
      }
    },
    "/management/chargingstations/{identityKey}/remoteStopTransaction": {
      "post": {
        "tags": ["Charging Station Management"],
        "summary": "Remote Stop Transaction",
        "description": "Sends a remote stop request to the charging station",
        "operationId": "remoteStopTransaction",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoteStopTransactionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoteStopTransactionConfirmation"
                }
              }
            }
          },
          "404": { "description": "Charging station not found" },
          "504": {
            "description": "RPC Timeout. The charging station did not respond in time."
          }
        }
      }
    },
    "/management/chargingstations/{identityKey}/remoteStartTransaction": {
      "post": {
        "tags": ["Charging Station Management"],
        "summary": "Remote Start Transaction",
        "description": "Sends a remote start request to the charging station",
        "operationId": "remoteStartTransaction",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoteStartTransactionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoteStartTransactionConfirmation"
                }
              }
            }
          },
          "404": { "description": "Charging station not found" },
          "504": {
            "description": "RPC Timeout. The charging station did not respond in time."
          }
        }
      }
    },
    "/management/chargingstations/{identityKey}/configuration": {
      "get": {
        "tags": ["Charging Station Management"],
        "summary": "Get configuration",
        "description": "Request the configuration settings from the charging station",
        "operationId": "getConfiguration",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetConfigurationConfirmation"
                }
              }
            }
          },
          "404": { "description": "Charging station not found" },
          "504": {
            "description": "RPC Timeout. The charging station did not respond in time."
          }
        }
      },
      "post": {
        "tags": ["Charging Station Management"],
        "summary": "Change configuration",
        "description": "Sends a change configuration request to the charging station",
        "operationId": "changeConfiguration",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeConfigurationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeConfigurationConfirmation"
                }
              }
            }
          },
          "404": { "description": "Charging station not found" },
          "504": {
            "description": "RPC Timeout. The charging station did not respond in time."
          }
        }
      }
    },
    "/management/chargingstations/{identityKey}/changeAvailability": {
      "post": {
        "tags": ["Charging Station Management"],
        "summary": "Change availability",
        "description": "Changes the availability of the charging station or a single EVSE",
        "operationId": "changeAvailability",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAvailabilityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeAvailabilityConfirmation"
                }
              }
            }
          },
          "404": { "description": "Charging station not found" },
          "504": {
            "description": "RPC Timeout. The charging station did not respond in time."
          }
        }
      }
    },
    "/locations": {
      "get": {
        "tags": ["Locations"],
        "summary": "Get all Locations",
        "description": "Returns a list of all Locations for the SUPER_ADMIN or the Locations filtered by User's Provider ID for CPO_ADMIN & CPO_USER.",
        "operationId": "getAllLocations",
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChargingStationLocation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Locations"],
        "summary": "Create location and Charging Station Groups",
        "description": "Create a new location, and one or more Charging Station Groups for it.",
        "operationId": "createLocationAndChargingStationGroups",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationAndChargingStationGroupsCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationAndChargingStationGroups"
                }
              }
            }
          },
          "400": {
            "description": "Group Create request contains duplicate names"
          },
          "409": { "description": "Conflict - Not valid opening times" },
          "403": { "description": "Forbidden - User has no Provider ID" }
        }
      }
    },
    "/chargingstations": {
      "get": {
        "tags": ["Charging Stations"],
        "summary": "Get all Charging Stations ",
        "description": "Returns a list of all Charging Station for Super Admin which are registered, or the Charging Stations filtered by User's CPO Provider Id for CPO Admin.",
        "operationId": "getAllChargingStationsByProviderId",
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CsmsChargingStation"
                  }
                }
              }
            }
          },
          "403": { "description": "Forbidden" }
        }
      },
      "post": {
        "tags": ["Charging Stations"],
        "summary": "Create charging station",
        "description": "Creates a new charging station in 3 services(svc-ocpp-server, svc-chargingstation & svc-ocpp-broker (if exists))",
        "operationId": "createChargingStation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CsmsChargingStationCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CsmsChargingStation" }
              }
            }
          },
          "400": { "description": "Bad request" },
          "409": { "description": "Conflict charging station already exists" },
          "403": { "description": "Forbidden" }
        }
      }
    },
    "/chargingstations/{chargingStationId}/evses": {
      "get": {
        "tags": ["EVSEs"],
        "summary": "Get all EVSEs",
        "description": "Returns a list of all EVSEs ",
        "operationId": "getAllEvses",
        "parameters": [
          {
            "name": "chargingStationId",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Evse" }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["EVSEs"],
        "summary": "Add EVSE",
        "description": "Returns the added EVSE",
        "operationId": "createEvse",
        "parameters": [
          {
            "name": "chargingStationId",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/EvseCreateRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Evse" }
              }
            }
          },
          "400": { "description": "Bad request" }
        }
      }
    },
    "/chargingstation-groups": {
      "post": {
        "tags": ["Charging Station Groups"],
        "summary": "Create Charging Station Group(s), for an existing Location",
        "description": "Creates one or more Charging Station Groups, for an existing Location. Filter for Provider ID is applied.",
        "operationId": "createChargingStationGroups",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CsmsChargingStationGroupCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChargingStationGroup"
                  }
                }
              }
            }
          },
          "400": { "description": "Create request contains duplicate names" },
          "403": { "description": "Forbidden - User has no Provider ID" },
          "409": { "description": "Charging Station Group name already exists" }
        }
      }
    },
    "/broker/csms": {
      "get": {
        "tags": ["CSMS"],
        "summary": "Get all CSMS",
        "description": "Return a list of all CSMS, if broker is configured.If not, it throws 404 exception.",
        "operationId": "getAllCsms",
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Csms" }
                }
              }
            }
          },
          "404": { "description": "Broker is not configured" }
        }
      },
      "post": {
        "tags": ["CSMS"],
        "summary": "Create CSMS",
        "description": "Create a new CSMS and save it to database",
        "operationId": "createCsms",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CsmsCreateRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Csms" }
              }
            }
          },
          "409": {
            "description": "CSMS with the specified display name already exists"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": ["User"],
        "summary": "Get all users",
        "description": "Returns the list of all users that have an assigned user role",
        "operationId": "getAllUsers",
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedCsmsUserDto"
                  }
                }
              }
            }
          },
          "403": { "description": "Forbidden" },
          "401": { "description": "Unauthorized - no credentials provided" }
        }
      }
    },
    "/users/roles": {
      "get": {
        "tags": ["User"],
        "summary": "Get all roles",
        "description": "Returns the list of all user roles as String",
        "operationId": "getAllRoles",
        "responses": {
          "200": { "description": "Successful Operation" },
          "403": { "description": "Forbidden" },
          "401": { "description": "Unauthorized - no credentials provided" }
        }
      }
    },
    "/users/requests": {
      "get": {
        "tags": ["User"],
        "summary": "Get all User Access Requests",
        "description": "Returns the list of all User access requests",
        "operationId": "getAllUserAccessRequests",
        "responses": {
          "200": { "description": "Successful Operation" },
          "403": { "description": "Forbidden" },
          "401": { "description": "Unauthorized - no credentials provided" }
        }
      }
    },
    "/users/me": {
      "get": {
        "tags": ["User"],
        "summary": "Get current user info",
        "description": "Returns the user information of the current user",
        "operationId": "getCurrentUserInfo",
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CsmsUserDto" }
              }
            }
          },
          "401": { "description": "Unauthorized - no credentials provided" }
        }
      }
    },
    "/ocpp-messages/{identityKey}": {
      "get": {
        "tags": ["OCPP Messages"],
        "summary": "Get all OCPP messages",
        "description": "Returns a pageable list of all OCPP messages for the specified charge point",
        "operationId": "getAllOcppMessages",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "pageable",
            "in": "query",
            "required": true,
            "schema": { "$ref": "#/components/schemas/Pageable" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PageOcppMessageLogEntry"
                }
              }
            }
          },
          "400": { "description": "Bad request" }
        }
      }
    },
    "/ocpp-messages/{identityKey}/zip": {
      "get": {
        "tags": ["OCPP Messages"],
        "summary": "Get OCPP messages (ZIP)",
        "description": "Returns a ZIP of all OCPP messages for the specified charge point",
        "operationId": "getAllOcppMessagesZip",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": { "application/zip": {} }
          },
          "400": { "description": "Bad request" },
          "404": { "description": "Charging session not found" }
        }
      }
    },
    "/ocpp-messages/{identityKey}/csv": {
      "get": {
        "tags": ["OCPP Messages"],
        "summary": "Get OCPP messages (CSV)",
        "description": "Returns a CSV of all OCPP messages for the specified charge point",
        "operationId": "getAllOcppMessagesCsv",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": { "application/csv": {} }
          },
          "400": { "description": "Bad request" },
          "404": { "description": "Charging session not found" }
        }
      }
    },
    "/ocpp-messages/search": {
      "get": {
        "tags": ["OCPP Messages"],
        "summary": "Get OCPP messages by search",
        "description": "Get all OCPP messages filtered by Time from, Time to , and message Type",
        "operationId": "getOcppLogBySearch",
        "parameters": [
          {
            "name": "identityKey",
            "in": "query",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "timeFrom",
            "in": "query",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "timeTo",
            "in": "query",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "messageType",
            "in": "query",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "messageDirection",
            "in": "query",
            "required": false,
            "schema": { "type": "string", "enum": ["CS_2_CSMS", "CSMS_2_CS"] }
          },
          {
            "name": "pageable",
            "in": "query",
            "required": true,
            "schema": { "$ref": "#/components/schemas/Pageable" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/OcppMessageLogEntry" }
              }
            }
          },
          "400": { "description": "Bad request" }
        }
      }
    },
    "/chargingstation-groups/search": {
      "get": {
        "tags": ["Charging Station Groups"],
        "summary": "Get Charging Station Group by Identity Key",
        "description": "Get the Charging Station Group, that a specific Charging Station belongs to (Identity Key), filtered by Provider ID.",
        "operationId": "getChargingStationGroupByProviderIdAndIdentityKey",
        "parameters": [
          {
            "name": "identityKey",
            "in": "query",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChargingStationGroup"
                  }
                }
              }
            }
          },
          "403": { "description": "Forbidden - User has no Provider ID" },
          "404": { "description": "Charging Station Identity Key Not Found" }
        }
      }
    },
    "/chargingstation-groups/by-location/{locationId}": {
      "get": {
        "tags": ["Charging Station Groups"],
        "summary": "Get Charging Station Group(s) for one Location",
        "description": "Get all Charging Station Groups that belong to the requested Location, of the current Provider.",
        "operationId": "getAllChargingStationGroupsByProviderIdAndLocationId",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChargingStationGroup"
                  }
                }
              }
            }
          },
          "403": { "description": "Forbidden - User has no Provider ID" },
          "404": { "description": "Location Not Found" }
        }
      }
    },
    "/broker/csms/{uuid}/status": {
      "get": {
        "tags": ["CSMS"],
        "summary": "Get a CSMS Connectivity Status",
        "description": "Return a CSMS Connectivity Status",
        "operationId": "getCsmsStatusByUuid",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The UUID of the CSMS",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "The connectivity status of a Csms.",
                  "enum": ["ONLINE", "OFFLINE"]
                }
              }
            }
          },
          "404": { "description": "Csms not found" }
        }
      }
    },
    "/users/requests/{userId}": {
      "delete": {
        "tags": ["User"],
        "summary": "Delete User Access Request ",
        "description": "Deletes a user account access request",
        "operationId": "deleteUserAccessRequest",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Successful Operation" },
          "404": { "description": "User access request not found" },
          "401": { "description": "Unauthorized - no credentials provided" }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ExtendedCsmsUserDto": {
        "type": "object",
        "properties": {
          "providerId": {
            "type": "string",
            "description": "The provider ID",
            "example": "DE*ERG"
          },
          "userRole": {
            "type": "string",
            "description": "The assigned user role",
            "example": "CPO_USER",
            "enum": [
              "SUPER_ADMIN",
              "CPO_ADMIN",
              "CPO_USER",
              "CPO_SUB_OPERATOR_USER"
            ]
          },
          "isActive": {
            "type": "boolean",
            "description": "Indicates if the user account is active",
            "example": true
          },
          "emailAddress": {
            "type": "string",
            "description": "The email address of the user",
            "example": "john.doe@energystacks.io"
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the user",
            "example": "John Doe"
          },
          "userId": {
            "type": "string",
            "description": "The ID of the user",
            "example": "ZOsNHVu2TgI6PrWRb9YqI7XEL9YSZl50y4"
          },
          "dateCreatedAt": {
            "type": "string",
            "description": "The date and time when the user account was created in the system",
            "format": "date-time",
            "example": "2021-03-19T14:11:43Z"
          }
        }
      },
      "UpdateUserRequest": {
        "required": ["isActive", "userRole"],
        "type": "object",
        "properties": {
          "userRole": {
            "type": "string",
            "description": "The assigned user role",
            "example": "CPO_USER",
            "enum": [
              "SUPER_ADMIN",
              "CPO_ADMIN",
              "CPO_USER",
              "CPO_SUB_OPERATOR_USER"
            ]
          },
          "isActive": {
            "type": "boolean",
            "description": "Indicates if the user account is active",
            "example": true
          },
          "providerId": {
            "pattern": "^[A-Z]{2}\\*[0-9A-Z]{3}$",
            "type": "string",
            "description": "Indicates the Provider of this user",
            "example": "AB*CDE"
          }
        }
      },
      "Token": {
        "required": [
          "contract_id",
          "country_code",
          "expiry_date",
          "issuer",
          "last_updated",
          "party_id",
          "type",
          "uid",
          "valid",
          "whitelist"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of token\n * <p>\n * NOTE: The eMSP is RECOMMENDED to push Tokens with type: AD_HOC_USER or APP_USER with whitelist set to\n * NEVER. Whitelists are very useful for RFID type Tokens, but the AD_HOC_USER/APP_USER Tokens are used to\n * start Sessions from an App etc. so whitelisting them has no advantages.\n * </p>",
            "example": "RFID",
            "enum": ["AD_HOC_USER", "APP_USER", "OTHER", "RFID"]
          },
          "issuer": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Issuing company, most of the times the name of the company printed on the\ntoken (RFID card), not necessarily the eMSP.",
            "example": "ACME Inc."
          },
          "whitelist": {
            "type": "string",
            "description": "Indicates what type of white-listing is allowed.",
            "example": "ALLOWED",
            "enum": ["ALWAYS", "ALLOWED", "ALLOWED_OFFLINE", "NEVER"]
          },
          "uid": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Unique ID by which this Token can be identified.\nThis is the field used by CPO system (RFID reader on the Charge Point) to\nidentify this token.\nCurrently, in most cases: type=RFID, this is the RFID hidden ID as read by the\nRFID reader, but that is not a requirement.\nIf this is a APP_USER or AD_HOC_USER Token, it will be a uniquely, by the eMSP,\ngenerated ID.\nThis field is named uid instead of id to prevent confusion with: contract_id.\n",
            "example": "123456789"
          },
          "country_code": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "ISO-3166 alpha-2 country code of the MSP that 'owns' this Token.",
            "example": "DE"
          },
          "party_id": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "CPO ID of the MSP that 'owns' this Token (following the ISO-15118 standard).",
            "example": "ERG"
          },
          "contract_id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the EV Driver contract token within the eMSP’s platform (and\nsuboperator platforms). Recommended to follow the specification for eMA ID\nfrom \"eMI3 standard version V1.0\" (http://emi3group.com/documents-links/)\n\"Part 2: business objects.\"\nNote: Temporarily it will be implemented as UUID value",
            "example": "DE8ACC12E46L89"
          },
          "visual_number": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Visual readable number/identification as printed on the Token (RFID card), might\nbe equal to the contract_id.",
            "example": "DF000-2001-8999-1"
          },
          "group_id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "This ID groups a couple of tokens. This can be used to make two or more\ntokens work as one, so that a session can be started with one token and\nstopped with another, handy when a card and key-fob are given to the EV-driver.\nBeware that OCPP 1.5/1.6 only support group_ids (it is called parentId in OCPP\n1.5/1.6) with a maximum length of 20.",
            "example": "DF000-2001-8999"
          },
          "valid": { "type": "boolean", "description": "Is this Token valid" },
          "last_updated": {
            "type": "string",
            "description": "Timestamp when this Token was last updated (or created).",
            "format": "date-time"
          },
          "expiry_date": {
            "type": "string",
            "description": "Timestamp when this Token is no longer valid.",
            "format": "date-time"
          }
        }
      },
      "CsmsTokenUpdateRequest": {
        "required": ["expiry_date", "issuer", "valid", "whitelist"],
        "type": "object",
        "properties": {
          "issuer": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Issuing company, most of the times the name of the company printed on the token (RFID card), not necessarily the eMSP.",
            "example": "ACME Inc."
          },
          "whitelist": {
            "type": "string",
            "description": "Indicates what type of white-listing is allowed.",
            "example": "ALLOWED",
            "enum": ["ALWAYS", "ALLOWED", "ALLOWED_OFFLINE", "NEVER"]
          },
          "visual_number": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Visual readable number/identification as printed on the Token (RFID card), might be equal to the contract_id.",
            "example": "DF000-2001-8999-1"
          },
          "group_id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "This ID groups a couple of tokens. This can be used to make two or more tokens work as one, so that a session can be started with one token and stopped with another, handy when a card and key-fob are given to the EV-driver. Beware that OCPP 1.5/1.6 only support group_ids (it is called parentId in OCPP 1.5/1.6) with a maximum length of 20.",
            "example": "DF000-2001-8999"
          },
          "valid": { "type": "boolean", "description": "Is this Token valid" },
          "expiry_date": {
            "type": "string",
            "description": "Timestamp when this Token expires.",
            "format": "date-time"
          }
        }
      },
      "CsmsProviderDto": {
        "required": ["countryCode", "providerId", "providerName"],
        "type": "object",
        "properties": {
          "providerName": {
            "pattern": "^[^@#`/%:;,=?^$()#|+~&%{}.!<>\\[\\]\\\\]+?$",
            "type": "string",
            "description": "The Name of the Provider",
            "example": "energy stacks CPO"
          },
          "countryCode": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "The County Code of the Provider",
            "example": "DE"
          },
          "providerId": {
            "pattern": "^[A-Z]{2}\\*[0-9A-Z]{3}$",
            "type": "string",
            "description": "The provider ID",
            "example": "DE*ERG"
          }
        },
        "description": "The CSMS Provider object that is stored in the CSMS"
      },
      "CsmsProviderUpdateRequest": {
        "required": ["providerName"],
        "type": "object",
        "properties": {
          "providerName": {
            "pattern": "^[^@#`/%:;,=?^$()#|+~&%{}.!<>\\[\\]\\\\]+?$",
            "type": "string",
            "description": "The Name of the Provider",
            "example": "energy stacks CPO"
          }
        }
      },
      "AdditionalGeoLocation": {
        "required": ["latitude", "longitude"],
        "type": "object",
        "properties": {
          "latitude": {
            "maxLength": 10,
            "minLength": 0,
            "pattern": "-?[0-9]{1,2}\\.[0-9]{5,7}",
            "type": "string",
            "description": "Latitude of the point in decimal degree. Decimal separator: \".\", Regex: -?[0-9]{1,2}\\.[0-9]{5,7}",
            "example": "50.770774"
          },
          "longitude": {
            "maxLength": 11,
            "minLength": 0,
            "pattern": "-?[0-9]{1,3}\\.[0-9]{5,7}",
            "type": "string",
            "description": "Longitude of the point in decimal degree. Decimal separator: \".\", Regex: -?[0-9]{1,3}\\.[0-9]{5,7}",
            "example": "-126.104965"
          },
          "name": { "$ref": "#/components/schemas/DisplayText" }
        },
        "description": "This class defines an additional geo location that is relevant for the Charge Point. The geodetic system to be used is WGS 84.",
        "nullable": true
      },
      "BusinessDetails": {
        "required": ["name"],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Name of the operator."
          },
          "website": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Link to the operator’s website. An URL a string(255) type following the w3.org spec."
          },
          "logo": { "$ref": "#/components/schemas/Image" }
        },
        "description": "Information of the owner if available.",
        "nullable": true
      },
      "ChargingStation": {
        "required": ["chargingStationId", "evses", "identityKey", "providerId"],
        "type": "object",
        "properties": {
          "identityKey": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "This contains the identity key of the Charging Station.",
            "example": "ACE324452"
          },
          "chargingStationId": {
            "type": "integer",
            "description": "Identifies the Charging Station.",
            "format": "int32",
            "example": 32567
          },
          "evses": {
            "type": "array",
            "description": "Identifies the list of the evses inside the Charging Station.",
            "items": { "$ref": "#/components/schemas/Evse" }
          },
          "operationalStatus": {
            "type": "string",
            "description": "This contains the operational status of the Charging Station.",
            "example": "AVAILABLE",
            "enum": ["AVAILABLE", "BLOCKED", "CHARGING", "OUTOFORDER"]
          },
          "communicationType": {
            "type": "string",
            "description": "This contains the communication type of the Charging Station.",
            "example": "WiFi",
            "enum": ["WiFi", "LTE", "Ethernet"]
          },
          "installationDate": {
            "type": "string",
            "description": "This contains the installation Date of the Charging Station.",
            "format": "date-time"
          },
          "contactPerson": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "This contains the installation contract person of the Charging Station."
          },
          "loadManagementAvailable": {
            "type": "boolean",
            "description": "This contains if the load management is available in the Charging Station.",
            "example": true
          },
          "calibrationLawCompliant": {
            "type": "boolean",
            "description": "This contains if the Charging Station is law compliant.",
            "example": true
          },
          "authenticationMethods": {
            "type": "array",
            "description": "This contains the authentication methods of the Charging Station.",
            "items": {
              "type": "string",
              "description": "This contains the authentication methods of the Charging Station.",
              "enum": ["RFID", "APP", "ISO15118"]
            }
          },
          "capabilities": {
            "type": "array",
            "description": "List of functionalities that Charging Station is capable of",
            "items": {
              "type": "string",
              "description": "List of functionalities that Charging Station is capable of",
              "enum": [
                "CHARGING_PROFILE_CAPABLE",
                "CHARGING_PREFERENCES_CAPABLE",
                "CHIP_CARD_SUPPORT",
                "CONTACTLESS_CARD_SUPPORT",
                "CREDIT_CARD_PAYABLE",
                "DEBIT_CARD_PAYABLE",
                "PED_TERMINAL",
                "REMOTE_START_STOP_CAPABLE",
                "RESERVABLE",
                "RFID_READER",
                "TOKEN_GROUP_CAPABLE",
                "UNLOCK_CAPABLE",
                "START_SESSION_CONNECTOR_REQUIRED"
              ]
            }
          },
          "floorLevel": {
            "maxLength": 4,
            "minLength": 0,
            "type": "string",
            "description": "Level on which the Charge Point is located (in garage buildings) in the locally displayed numbering scheme.",
            "example": "2"
          },
          "coordinates": { "$ref": "#/components/schemas/GeoLocation" },
          "physicalReference": {
            "maxLength": 16,
            "minLength": 0,
            "type": "string",
            "description": "A number/string printed on the outside of the Charging Station for visual identification.",
            "example": "WB123AE2"
          },
          "directions": {
            "type": "array",
            "description": "Multi-language human-readable directions when more detailed information on how to reach the Charging Station from the Location is required.",
            "items": { "$ref": "#/components/schemas/DisplayText" }
          },
          "parkingRestrictions": {
            "type": "array",
            "description": "The restrictions that apply to the parking spot.",
            "items": {
              "type": "string",
              "description": "The restrictions that apply to the parking spot.",
              "enum": [
                "EV_ONLY",
                "PLUGGED",
                "DISABLED",
                "CUSTOMERS",
                "MOTORCYCLES"
              ]
            }
          },
          "images": {
            "type": "array",
            "description": "Links images related to the Charging Station such as photos or logos.",
            "items": { "$ref": "#/components/schemas/Image" }
          },
          "locationDetailsFromChargingStation": {
            "$ref": "#/components/schemas/LocationDetailsFromChargingStation"
          },
          "providerId": {
            "type": "string",
            "description": "This contains the CPO Provider ID.",
            "example": "DE*E3D"
          }
        },
        "description": "The Charging station object that is stored in the CSMS.",
        "nullable": true
      },
      "ChargingStationLocation": {
        "required": [
          "address",
          "city",
          "country",
          "country_code",
          "last_updated",
          "location_id",
          "party_id"
        ],
        "type": "object",
        "properties": {
          "publish": {
            "type": "boolean",
            "description": "Defines if a Location may be published on an website or app etc. When this is set to false, only tokens identified in the field: publish_allowed_to are allowed to be shown this Location. When the same location has EVSEs that may be published and may not be published, two 'Locations' should be created.",
            "nullable": true
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Display name of the location.",
            "nullable": true
          },
          "address": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "Street/block name and house number if available."
          },
          "city": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "City or town."
          },
          "state": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "State or province of the location, only to be used when relevant.",
            "nullable": true
          },
          "country": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "ISO 3166-1 alpha-3 code for the country of this location.",
            "example": "DEU"
          },
          "coordinates": { "$ref": "#/components/schemas/GeoLocation" },
          "directions": {
            "type": "array",
            "description": "Human-readable directions on how to reach the location.",
            "nullable": true,
            "items": { "$ref": "#/components/schemas/DisplayText" }
          },
          "operator": { "$ref": "#/components/schemas/BusinessDetails" },
          "suboperator": { "$ref": "#/components/schemas/BusinessDetails" },
          "owner": { "$ref": "#/components/schemas/BusinessDetails" },
          "facilities": {
            "type": "array",
            "description": "Optional list of facilities this charging location directly belongsmto.",
            "nullable": true,
            "items": {
              "type": "string",
              "description": "Optional list of facilities this charging location directly belongsmto.",
              "nullable": true,
              "enum": [
                "HOTEL",
                "RESTAURANT",
                "CAFE",
                "MALL",
                "SUPERMARKET",
                "SPORT",
                "RECREATION_AREA",
                "NATURE",
                "MUSEUM",
                "BIKE_SHARING",
                "BUS_STOP",
                "TAXI_STAND",
                "TRAM_STOP",
                "METRO_STATION",
                "TRAIN_STATION",
                "AIRPORT",
                "PARKING_LOT",
                "CARPOOL_PARKING",
                "FUEL_STATION",
                "WIFI"
              ]
            }
          },
          "images": {
            "type": "array",
            "description": "Links to images related to the location such as photos or logos.",
            "nullable": true,
            "items": { "$ref": "#/components/schemas/Image" }
          },
          "chargingStations": {
            "type": "array",
            "description": "The Charging Stations at this location.",
            "nullable": true,
            "items": { "$ref": "#/components/schemas/ChargingStation" }
          },
          "country_code": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "ISO-3166 alpha-2 country code of the CPO that 'owns' this Location.",
            "example": "DE"
          },
          "party_id": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "ID of the CPO that 'owns' this Location (following the ISO-15118 standard)."
          },
          "location_id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the location within the CPOs platform (and suboperator platforms). This field can never be changed, modified or renamed."
          },
          "postal_code": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Postal code of the location, may only be omitted when the location has no postal code: in some countries charging locations at highways don’t have postal codes.",
            "nullable": true
          },
          "related_locations": {
            "type": "array",
            "description": "Geographical location of related points relevant to the user.",
            "nullable": true,
            "items": { "$ref": "#/components/schemas/AdditionalGeoLocation" }
          },
          "parking_type": {
            "type": "string",
            "description": "The general type of parking at the charge point location.",
            "nullable": true,
            "enum": [
              "ALONG_MOTORWAY",
              "PARKING_GARAGE",
              "PARKING_LOT",
              "ON_DRIVEWAY",
              "ON_STREET",
              "UNDERGROUND_GARAGE"
            ]
          },
          "time_zone": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "One of IANA tzdata’s TZ-values representing the time zone of the location. For example: \"Europe/Oslo\", \"Europe/Zurich\". (http://www.iana.org/time-zones)",
            "nullable": true,
            "example": "Europe/Oslo"
          },
          "opening_times": { "$ref": "#/components/schemas/Hours" },
          "charging_when_closed": {
            "type": "boolean",
            "description": "Indicates if the EVSEs are still charging outside the opening hours of the location. E.g. when the parking garage closes its barriers over night, is it allowed to charge till the next morning? Default: true",
            "nullable": true
          },
          "energy_mix": { "$ref": "#/components/schemas/EnergyMix" },
          "last_updated": {
            "type": "string",
            "description": "Timestamp when this Location or one of its EVSEs or Connectors were last updated (or created).",
            "format": "date-time"
          }
        },
        "description": "The Location object that is stored in the CSMS."
      },
      "Connector": {
        "required": [
          "format",
          "id",
          "last_updated",
          "max_amperage",
          "max_voltage",
          "power_type",
          "standard"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Identifier of the Connector within the EVSE. Two Connectors may have the same id as long as they do not belong to the same EVSE object.",
            "example": "1"
          },
          "standard": {
            "type": "string",
            "description": "The standard of the installed connector.",
            "enum": [
              "CHADEMO",
              "CHAOJI",
              "DOMESTIC_A",
              "DOMESTIC_B",
              "DOMESTIC_C",
              "DOMESTIC_D",
              "DOMESTIC_E",
              "DOMESTIC_F",
              "DOMESTIC_G",
              "DOMESTIC_H",
              "DOMESTIC_I",
              "DOMESTIC_J",
              "DOMESTIC_K",
              "DOMESTIC_L",
              "DOMESTIC_M",
              "DOMESTIC_N",
              "DOMESTIC_O",
              "GBT_AC",
              "GBT_DC",
              "IEC_60309_2_single_16",
              "IEC_60309_2_three_16",
              "IEC_60309_2_three_32",
              "IEC_60309_2_three_64",
              "IEC_62196_T1",
              "IEC_62196_T1_COMBO",
              "IEC_62196_T2",
              "IEC_62196_T2_COMBO",
              "IEC_62196_T3A",
              "IEC_62196_T3C",
              "NEMA_5_20",
              "NEMA_6_30",
              "NEMA_6_50",
              "NEMA_10_30",
              "NEMA_10_50",
              "NEMA_14_30",
              "NEMA_14_50",
              "PANTOGRAPH_BOTTOM_UP",
              "PANTOGRAPH_TOP_DOWN",
              "TESLA_R",
              "TESLA_S",
              "UNKNOWN"
            ]
          },
          "format": {
            "type": "string",
            "description": "The format (socket/cable) of the installed connector.",
            "enum": ["SOCKET", "CABLE"]
          },
          "power_type": {
            "type": "string",
            "enum": [
              "AC_1_PHASE",
              "AC_2_PHASE",
              "AC_2_PHASE_SPLIT",
              "AC_3_PHASE",
              "DC"
            ]
          },
          "max_voltage": {
            "type": "integer",
            "description": "Maximum voltage of the connector (line to neutral for AC_3_PHASE), in volt [V]. For example: DC Chargers might vary the voltage during charging when battery almost full.",
            "format": "int32"
          },
          "max_amperage": {
            "type": "integer",
            "description": "Maximum amperage of the connector, in ampere [A].",
            "format": "int32"
          },
          "max_electric_power": {
            "type": "integer",
            "description": "Maximum electric power that can be delivered by this connector, in Watts (W). When the maximum electric power is lower than the calculated value from voltage and amperage, this value should be set.\n    For example: A DC Charge Point which can delivers up to 920V and up to 400A can be limited to a maximum of 150kW (max_electric_power = 150000). Depending on the car, it may supply max voltage or current, but not both at the same time.\nFor AC Charge Points, the amount of phases used can also have influence on the maximum power.",
            "format": "int32"
          },
          "tariff_ids": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Identifiers of the currently valid charging tariffs. Multiple tariffs are possible, but only one of each Tariff.type can be active at the same time. Tariffs with the same type are only allowed if they are not active at the same time: start_date_time and end_date_time period not overlapping.\n    When preference-based smart charging is supported, one tariff for every possible ProfileType should be provided. These tell the user about the options they have at this Connector, and what the tariff is for every option.\nFor a \"free of charge\" tariff, this field should be set and point to a defined \"free of charge\" tariff."
          },
          "terms_and_conditions": {
            "type": "string",
            "description": "URL to the operator’s terms and conditions.",
            "format": "url",
            "example": "http://www.example.com"
          },
          "last_updated": {
            "type": "string",
            "description": "Timestamp when this Connector was last updated (or created).",
            "format": "date-time"
          }
        },
        "description": "A Connector is the socket or cable and plug available for the EV to use. A single EVSE may provide multiple Connectors but only one of them can be in use at the same time. A Connector always belongs to an EVSE object."
      },
      "DisplayText": {
        "required": ["language", "text"],
        "type": "object",
        "properties": {
          "language": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "Language Code ISO 639-1.",
            "example": "ar"
          },
          "text": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Text to be displayed to a end user. No markup, html etc. allowed.",
            "example": "this is a display text"
          }
        },
        "description": "Name of the point in local language or as written at the location. For example the street name of a parking lot entrance or it’s number."
      },
      "EnergyMix": {
        "required": ["is_green_energy"],
        "type": "object",
        "properties": {
          "is_green_energy": {
            "type": "boolean",
            "description": "True if 100% from regenerative sources. (CO2 and nuclear waste is zero)",
            "example": false
          },
          "energy_sources": {
            "type": "array",
            "description": "Key-value pairs (enum + percentage) of energy sources of this location’s tariff.",
            "items": { "$ref": "#/components/schemas/EnergySource" }
          },
          "environ_impact": {
            "type": "array",
            "description": "Key-value pairs (enum + percentage) of nuclear waste and CO2 exhaust of this location’s tariff.",
            "items": { "$ref": "#/components/schemas/EnvironmentalImpact" }
          },
          "supplier_name": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Name of the energy supplier, delivering the energy for this location or tariff.",
            "example": "HANDWE EV"
          },
          "energy_product_name": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Name of the energy suppliers product/tariff plan used at this location.",
            "example": "Kleenheat"
          }
        },
        "description": "This type is used to specify the energy mix and environmental impact of the supplied energy at a location or in a tariff.",
        "nullable": true
      },
      "EnergySource": {
        "required": ["percentage", "source"],
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "description": "Categories of energy sources.",
            "example": "GAS",
            "enum": [
              "NUCLEAR",
              "GENERAL_FOSSIL",
              "COAL",
              "GAS",
              "GENERAL_GREEN",
              "SOLAR",
              "WIND",
              "WATER"
            ]
          },
          "percentage": {
            "maximum": 100.0,
            "exclusiveMaximum": false,
            "minimum": 0.0,
            "exclusiveMinimum": false,
            "type": "number",
            "description": "Percentage of this source (0-100) in the mix.",
            "example": 33.2
          }
        },
        "description": "Key-value pairs (enum + percentage) of energy sources. All given values of all categories should add up to 100 percent."
      },
      "EnvironmentalImpact": {
        "required": ["amount", "category"],
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "description": "Categories of environmental impact values.",
            "example": "NUCLEAR_WASTE",
            "enum": ["NUCLEAR_WASTE", "CARBON_DIOXIDE"]
          },
          "amount": {
            "minimum": 0.0,
            "exclusiveMinimum": false,
            "type": "number",
            "description": "Amount of this portion in g/kWh.",
            "example": 0.005
          }
        },
        "description": "Amount of waste produced/emitted per kWh."
      },
      "Evse": {
        "required": ["connectors", "last_updated", "status"],
        "type": "object",
        "properties": {
          "uid": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the EVSE within the CPOs platform (and suboperator platforms). For example a database ID or the actual \"EVSE ID\". This field can never be changed, modified or renamed. This is the 'technical' identification of the EVSE, not to be used as 'human readable' identification, use the field evse_id for that.This field is named uid instead of id, because id could be confused with evse_id which is an eMI3 defined field."
          },
          "status": {
            "type": "string",
            "description": "Indicates the current status of the EVSE.",
            "enum": [
              "AVAILABLE",
              "BLOCKED",
              "CHARGING",
              "INOPERATIVE",
              "OUTOFORDER",
              "PLANNED",
              "REMOVED",
              "RESERVED",
              "UNKNOWN"
            ]
          },
          "connectors": {
            "type": "array",
            "description": "List of available connectors on the EVSE.",
            "items": { "$ref": "#/components/schemas/Connector" }
          },
          "evse_id": {
            "maxLength": 48,
            "minLength": 0,
            "type": "string",
            "description": "Compliant with the following specification for EVSE ID from \"eMI3 standard version V1.0\" (http://emi3group.com/documents-links/) \"Part 2: business objects.\" Optional because: if an evse_id is to be re-used in the real world, the evse_id can be removed from an EVSE object if the status is set to REMOVED."
          },
          "status_schedule": {
            "type": "array",
            "description": "Indicates a planned status update of the EVSE.",
            "items": { "$ref": "#/components/schemas/StatusSchedule" }
          },
          "last_updated": {
            "type": "string",
            "description": "Timestamp when this EVSE or one of its Connectors was last updated (or created).",
            "format": "date-time"
          }
        },
        "description": "The EVSE object describes the part that controls the power supply to a single EV in a single session. It always belongs to a Location object. The object only contains directions to get from the location itself to the EVSE (i.e. floor, physical_reference or directions)."
      },
      "ExceptionalPeriod": {
        "required": ["period_begin", "period_end"],
        "type": "object",
        "properties": {
          "period_begin": {
            "type": "string",
            "description": "Begin of the exception. SecurityScheme.In UTC, time_zone field can be used to convert to local time.",
            "format": "date-time",
            "example": "2022-06-24T00:00:00Z"
          },
          "period_end": {
            "type": "string",
            "description": "End of the exception. In UTC, time_zone field can be used to convert to local time.",
            "format": "date-time",
            "example": "2022-06-25T00:00:00Z"
          }
        },
        "description": "Specifies one exceptional period for opening or access hours."
      },
      "GeoLocation": {
        "required": ["latitude", "longitude"],
        "type": "object",
        "properties": {
          "latitude": {
            "maxLength": 10,
            "minLength": 0,
            "pattern": "-?[0-9]{1,2}\\.[0-9]{5,7}",
            "type": "string",
            "description": "Latitude of the point in decimal degree. Decimal separator: '.', Regex: -?[0-9]{1,2}\\.[0-9]{5,7}",
            "example": "50.770774"
          },
          "longitude": {
            "maxLength": 11,
            "minLength": 0,
            "pattern": "-?[0-9]{1,3}\\.[0-9]{5,7}",
            "type": "string",
            "description": "Longitude of the point in decimal degree. Decimal separator: '.' Regex: -?[0-9]{1,3}\\.[0-9]{5,7}",
            "example": "-126.104965"
          }
        },
        "description": "This class defines the geo location of the Charge Point. The geodetic system to be used is WGS 84."
      },
      "Hours": {
        "required": ["twentyfourseven"],
        "type": "object",
        "properties": {
          "twentyfourseven": {
            "type": "boolean",
            "description": "True to represent 24 hours a day and 7 days a week, except the given exceptions.",
            "example": false
          },
          "regular_hours": {
            "type": "array",
            "description": "Regular hours, weekday-based. Only to be used if twentyfourseven=false, then this field needs to contain at least one RegularHours object.",
            "items": { "$ref": "#/components/schemas/RegularHours" }
          },
          "exceptional_openings": {
            "type": "array",
            "description": "Exceptions for specified calendar dates, time-range based. Periods the station is operating/accessible. Additional to regular_hours. May overlap regular rules.",
            "items": { "$ref": "#/components/schemas/ExceptionalPeriod" }
          },
          "exceptional_closings": {
            "type": "array",
            "description": "Exceptions for specified calendar dates, time-range based. Periods the station is not operating/accessible. Overwriting regular_hours and exceptional_openings. Should not overlap exceptional_openings.",
            "items": { "$ref": "#/components/schemas/ExceptionalPeriod" }
          }
        },
        "description": "Opening and access hours of the location.",
        "nullable": true
      },
      "Image": {
        "required": ["category", "type", "url"],
        "type": "object",
        "properties": {
          "url": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "URL from where the image data can be fetched through a web browser."
          },
          "thumbnail": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "URL from where a thumbnail of the image can be fetched through a web browser."
          },
          "category": {
            "type": "string",
            "description": "Describes what the image is used for.",
            "example": "CHARGER",
            "enum": [
              "CHARGER",
              "ENTRANCE",
              "LOCATION",
              "NETWORK",
              "OPERATOR",
              "OTHER",
              "OWNER"
            ]
          },
          "type": {
            "maxLength": 4,
            "minLength": 0,
            "type": "string",
            "description": "Image type, for example: gif, jpeg, png, svg",
            "example": "jpeg"
          },
          "width": {
            "type": "integer",
            "description": "Width of the full scale image.",
            "format": "int32",
            "example": 50
          },
          "height": {
            "type": "integer",
            "description": "Height of the full scale image.",
            "format": "int32",
            "example": 600
          }
        },
        "description": "Links images related to the Charging Station such as photos or logos."
      },
      "LocationDetailsFromChargingStation": {
        "required": ["location_id"],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Display name of the location.",
            "nullable": true
          },
          "location_id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the location within the CPOs platform (and suboperator platforms).This field can never be changed, modified or renamed."
          }
        },
        "description": "The Location details object from the Charging Station DTO."
      },
      "RegularHours": {
        "required": ["period_begin", "period_end", "weekday"],
        "type": "object",
        "properties": {
          "weekday": {
            "type": "integer",
            "description": "Number of day in the week, from Monday (1) till Sunday (7)",
            "format": "int32",
            "example": 1
          },
          "period_begin": {
            "maxLength": 5,
            "minLength": 0,
            "pattern": "([0-1][0-9]|2[0-3]):[0-5][0-9]",
            "type": "string",
            "description": "Begin of the regular period, in local time, given in hours and minutes. Must be in 24h format with leading zeros. Example: \"18:15\". Hour/Minute separator: \":\" Regex: ([0-1][0-9]|2[0-3]):[0-5][0-9].",
            "example": "07:00"
          },
          "period_end": {
            "maxLength": 5,
            "minLength": 0,
            "pattern": "([0-1][0-9]|2[0-3]):[0-5][0-9]",
            "type": "string",
            "description": "End of the regular period, in local time, syntax as for period_begin. Must be later than period_begin.",
            "example": "18:00"
          }
        },
        "description": "Regular recurring operation or access hours."
      },
      "StatusSchedule": {
        "required": ["period_begin", "status"],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status value during the scheduled period.",
            "enum": [
              "AVAILABLE",
              "BLOCKED",
              "CHARGING",
              "INOPERATIVE",
              "OUTOFORDER",
              "PLANNED",
              "REMOVED",
              "RESERVED",
              "UNKNOWN"
            ]
          },
          "period_begin": {
            "type": "string",
            "description": "Begin of the scheduled period.",
            "format": "date-time"
          },
          "period_end": {
            "type": "string",
            "description": "End of the scheduled period, if known.",
            "format": "date-time"
          }
        },
        "description": "This type is used to schedule status periods in the future. The eMSP can provide this information to the EV user for trip planning purposes. A period MAY have no end. Example: \"This station will be running as of tomorrow. Today it is still planned and under construction.\""
      },
      "LocationUpdateRequest": {
        "required": ["address", "city", "country"],
        "type": "object",
        "properties": {
          "publish": {
            "type": "boolean",
            "description": "Defines if a Location may be published on an website or app etc.When this is set to false, only tokens identified in the field: publish_allowed_to are allowed to beshown this Location. When the same location has EVSEs that may be published and may not be published, two 'Locations' should be created.",
            "nullable": true
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Display name of the location.",
            "nullable": true
          },
          "address": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "Street/block name and house number if available."
          },
          "city": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "City or town."
          },
          "state": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "State or province of the location, only to be used when relevant.",
            "nullable": true
          },
          "country": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "ISO 3166-1 alpha-3 code for the country of this location.",
            "example": "DEU"
          },
          "coordinates": { "$ref": "#/components/schemas/GeoLocation" },
          "directions": {
            "type": "array",
            "description": "Human-readable directions on how to reach the location.",
            "nullable": true,
            "items": { "$ref": "#/components/schemas/DisplayText" }
          },
          "operator": { "$ref": "#/components/schemas/BusinessDetails" },
          "suboperator": { "$ref": "#/components/schemas/BusinessDetails" },
          "owner": { "$ref": "#/components/schemas/BusinessDetails" },
          "facilities": {
            "type": "array",
            "description": "Optional list of facilities this charging location directly belongs to.",
            "nullable": true,
            "items": {
              "type": "string",
              "description": "Optional list of facilities this charging location directly belongs to.",
              "nullable": true,
              "enum": [
                "HOTEL",
                "RESTAURANT",
                "CAFE",
                "MALL",
                "SUPERMARKET",
                "SPORT",
                "RECREATION_AREA",
                "NATURE",
                "MUSEUM",
                "BIKE_SHARING",
                "BUS_STOP",
                "TAXI_STAND",
                "TRAM_STOP",
                "METRO_STATION",
                "TRAIN_STATION",
                "AIRPORT",
                "PARKING_LOT",
                "CARPOOL_PARKING",
                "FUEL_STATION",
                "WIFI"
              ]
            }
          },
          "images": {
            "type": "array",
            "description": "Links to images related to the location such as photos or logos.",
            "nullable": true,
            "items": { "$ref": "#/components/schemas/Image" }
          },
          "postal_code": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Postal code of the location, may only be omitted when the location has no postal code: in some countries charging locations at highways don’t have postal codes.",
            "nullable": true
          },
          "related_locations": {
            "type": "array",
            "description": "Geographical location of related points relevant to the user.",
            "nullable": true,
            "items": { "$ref": "#/components/schemas/AdditionalGeoLocation" }
          },
          "parking_type": {
            "type": "string",
            "description": "The general type of parking at the charge point location.",
            "nullable": true,
            "example": "PARKING_GARAGE",
            "enum": [
              "ALONG_MOTORWAY",
              "PARKING_GARAGE",
              "PARKING_LOT",
              "ON_DRIVEWAY",
              "ON_STREET",
              "UNDERGROUND_GARAGE"
            ]
          },
          "time_zone": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "One of IANA tzdata’s TZ-values representing the time zone of the location.For example: \"Europe/Oslo\", \"Europe/Zurich\". (http://www.iana.org/time-zones)",
            "nullable": true,
            "example": "Europe/Oslo"
          },
          "opening_times": { "$ref": "#/components/schemas/Hours" },
          "charging_when_closed": {
            "type": "boolean",
            "description": "Indicates if the EVSEs are still charging outside the opening hours of the location. E.g. when the parking garage closes its barriers over night, is it allowed to charge till the next morning? Default: true",
            "nullable": true
          },
          "energy_mix": { "$ref": "#/components/schemas/EnergyMix" }
        },
        "description": "The Location object describes the location and its properties where a group of EVSEsthat belong together are installed. Typically, the Location object is the exact location of the group of EVSEs,but it can also be the entrance of a parking garage which contains these EVSEs.The exact way to reach each EVSE can be further specified by its own properties."
      },
      "CsmsChargingStation": {
        "required": [
          "chargingStationId",
          "chargingStationName",
          "chargingStationSerialNumber",
          "evses",
          "identityKey",
          "providerId"
        ],
        "type": "object",
        "properties": {
          "identityKey": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "This contains the identity key of the Charging Station.",
            "example": "ACE324452"
          },
          "chargingStationId": {
            "type": "integer",
            "description": "Identifies the Charging Station.",
            "format": "int32",
            "example": 32567
          },
          "evses": {
            "type": "array",
            "description": "Identifies the list of the evses inside the Charging Station.",
            "items": { "$ref": "#/components/schemas/Evse" }
          },
          "operationalStatus": {
            "type": "string",
            "description": "This contains the operational status of the Charging Station.",
            "example": "AVAILABLE",
            "enum": ["AVAILABLE", "BLOCKED", "CHARGING", "OUTOFORDER"]
          },
          "communicationType": {
            "type": "string",
            "description": "This contains the communication type of the Charging Station.",
            "example": "WiFi",
            "enum": ["WiFi", "LTE", "Ethernet"]
          },
          "installationDate": {
            "type": "string",
            "description": "This contains the installation Date of the Charging Station.",
            "format": "date-time"
          },
          "contactPerson": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "This contains the installation contract person of the Charging Station."
          },
          "loadManagementAvailable": {
            "type": "boolean",
            "description": "This contains if the load management is available in the Charging Station.",
            "example": true
          },
          "calibrationLawCompliant": {
            "type": "boolean",
            "description": "This contains if the Charging Station is law compliant.",
            "example": true
          },
          "authenticationMethods": {
            "type": "array",
            "description": "This contains the authentication methods of the Charging Station.",
            "items": {
              "type": "string",
              "description": "This contains the authentication methods of the Charging Station.",
              "enum": ["RFID", "APP", "ISO15118"]
            }
          },
          "capabilities": {
            "type": "array",
            "description": "List of functionalities that Charging Station is capable of",
            "items": {
              "type": "string",
              "description": "List of functionalities that Charging Station is capable of",
              "enum": [
                "CHARGING_PROFILE_CAPABLE",
                "CHARGING_PREFERENCES_CAPABLE",
                "CHIP_CARD_SUPPORT",
                "CONTACTLESS_CARD_SUPPORT",
                "CREDIT_CARD_PAYABLE",
                "DEBIT_CARD_PAYABLE",
                "PED_TERMINAL",
                "REMOTE_START_STOP_CAPABLE",
                "RESERVABLE",
                "RFID_READER",
                "TOKEN_GROUP_CAPABLE",
                "UNLOCK_CAPABLE",
                "START_SESSION_CONNECTOR_REQUIRED"
              ]
            }
          },
          "floorLevel": {
            "maxLength": 4,
            "minLength": 0,
            "type": "string",
            "description": "Level on which the Charge Point is located (in garage buildings) in the locally displayed numbering scheme.",
            "example": "2"
          },
          "coordinates": { "$ref": "#/components/schemas/GeoLocation" },
          "physicalReference": {
            "maxLength": 16,
            "minLength": 0,
            "type": "string",
            "description": "A number/string printed on the outside of the Charging Station for visual identification.",
            "example": "WB123AE2"
          },
          "directions": {
            "type": "array",
            "description": "Multi-language human-readable directions when more detailed information on how to reach the Charging Station from the Location is required.",
            "items": { "$ref": "#/components/schemas/DisplayText" }
          },
          "parkingRestrictions": {
            "type": "array",
            "description": "The restrictions that apply to the parking spot.",
            "items": {
              "type": "string",
              "description": "The restrictions that apply to the parking spot.",
              "enum": [
                "EV_ONLY",
                "PLUGGED",
                "DISABLED",
                "CUSTOMERS",
                "MOTORCYCLES"
              ]
            }
          },
          "images": {
            "type": "array",
            "description": "Links images related to the Charging Station such as photos or logos.",
            "items": { "$ref": "#/components/schemas/Image" }
          },
          "locationDetailsFromChargingStation": {
            "$ref": "#/components/schemas/LocationDetailsFromChargingStation"
          },
          "providerId": {
            "type": "string",
            "description": "This contains the CPO Provider ID.",
            "example": "DE*E3D"
          },
          "chargingStationName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "If not provided then default value: <charging_station_model> + <identity_key>.If 'charging_station_model' is null, then 'charging_station_name' = 'identity_key'",
            "example": "WallBox NG Pro 1550"
          },
          "chargingStationVendor": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string"
          },
          "chargingStationModel": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "The Charging Station model.",
            "example": "WallBox NG Pro"
          },
          "firmwareVersion": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "userName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The basic auth user name",
            "example": "acc-21107439"
          },
          "password": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The basic auth password",
            "example": "myS3cR3tPass|||0Rd"
          },
          "chargingStationSerialNumber": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Serial number of a charging station (number provided on hardware).It is provided in BootNotification message.",
            "example": "SN152251"
          },
          "ocppProtocolVersion": {
            "type": "string",
            "description": "The OCPP protocol version which should be negotiated during the handshake.",
            "example": "V_16",
            "enum": ["V_15", "V_16", "V_20"]
          },
          "iccid": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "This contains the ICCID of the modem’s SIM card."
          },
          "imsi": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "This contains the IMSI of the modem’s SIM card."
          },
          "meterSerialNumber": {
            "maxLength": 25,
            "minLength": 0,
            "type": "string",
            "description": "This contains the serial number of the main power meter of the Charging Station."
          },
          "meterType": {
            "maxLength": 25,
            "minLength": 0,
            "type": "string",
            "description": "This contains the type of the main power meter of the Charging Station."
          },
          "online": {
            "type": "boolean",
            "description": "Indicates if the Charging Station is online."
          },
          "dateCreated": {
            "type": "string",
            "description": "This contains the creation date and time of the  of Charging Station",
            "format": "date-time",
            "example": "2021-03-19T14:11:43Z"
          },
          "dateLastHeartBeat": {
            "type": "string",
            "description": "The date and time of the last received heartbeat",
            "format": "date-time"
          },
          "dateLastBoot": {
            "type": "string",
            "description": "The date and time of the last boot event",
            "format": "date-time"
          },
          "csmsUuid": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "This contains the UUID of the CSMS.",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "csmsDisplayName": {
            "type": "string",
            "description": "This contains the display name of the CSMS.",
            "example": "EnergyStacks CSMS"
          },
          "chargingStationGroupUuid": {
            "pattern": "^(?i)[0-9A-F]{8}-[0-9A-F]{4}-[4][0-9A-F]{3}-[89abAB][0-9A-F]{3}-[0-9A-F]{12}$",
            "type": "string",
            "description": "The Charging Station Group ID that belongs to the provided Location. If Location ID is null or empty, then this field must be null too.",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          }
        },
        "description": "Common Charging Station DTO for the services: svc-chargingstation, svc-ocpp-server & svc-ocpp-broker (if exists)."
      },
      "CsmsChargingStationUpdateRequest": {
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "description": "This contains the location id of the Charging Station."
          },
          "operationalStatus": {
            "type": "string",
            "description": "This contains the operational status of the Charging Station.",
            "enum": ["AVAILABLE", "BLOCKED", "CHARGING", "OUTOFORDER"]
          },
          "communicationType": {
            "type": "string",
            "description": "This contains the communication type of the Charging Station.",
            "enum": ["WiFi", "LTE", "Ethernet"]
          },
          "installationDate": {
            "type": "string",
            "description": "This contains the installation Date of the Charging Station.",
            "format": "date-time"
          },
          "contactPerson": {
            "type": "string",
            "description": "This contains the installation contract person of the Charging Station."
          },
          "loadManagementAvailable": {
            "type": "boolean",
            "description": "This contains if the load management is available in the Charging Station.",
            "example": true
          },
          "calibrationLawCompliant": {
            "type": "boolean",
            "description": "This contains if the Charging Station is law compliant.",
            "example": true
          },
          "authenticationMethods": {
            "type": "array",
            "description": "This contains the authentication methods of the Charging Station.",
            "items": {
              "type": "string",
              "description": "This contains the authentication methods of the Charging Station.",
              "enum": ["RFID", "APP", "ISO15118"]
            }
          },
          "capabilities": {
            "type": "array",
            "description": "List of functionalities that Charging Station is capable of",
            "items": {
              "type": "string",
              "description": "List of functionalities that Charging Station is capable of",
              "enum": [
                "CHARGING_PROFILE_CAPABLE",
                "CHARGING_PREFERENCES_CAPABLE",
                "CHIP_CARD_SUPPORT",
                "CONTACTLESS_CARD_SUPPORT",
                "CREDIT_CARD_PAYABLE",
                "DEBIT_CARD_PAYABLE",
                "PED_TERMINAL",
                "REMOTE_START_STOP_CAPABLE",
                "RESERVABLE",
                "RFID_READER",
                "TOKEN_GROUP_CAPABLE",
                "UNLOCK_CAPABLE",
                "START_SESSION_CONNECTOR_REQUIRED"
              ]
            }
          },
          "floorLevel": {
            "maxLength": 4,
            "minLength": 0,
            "type": "string",
            "description": "Level on which the Charge Point is located (in garage buildings) in the locally displayed numbering scheme.",
            "example": "2"
          },
          "coordinates": { "$ref": "#/components/schemas/GeoLocation" },
          "physicalReference": {
            "maxLength": 16,
            "minLength": 0,
            "type": "string",
            "description": "A number/string printed on the outside of the Charging Station for visual identification.",
            "example": "WB123AE2"
          },
          "directions": {
            "type": "array",
            "description": "Multi-language human-readable directions when more detailed information on how to reach the Charging Station from the Location is required.",
            "items": { "$ref": "#/components/schemas/DisplayText" }
          },
          "parkingRestrictions": {
            "type": "array",
            "description": "The restrictions that apply to the parking spot.",
            "items": {
              "type": "string",
              "description": "The restrictions that apply to the parking spot.",
              "enum": [
                "EV_ONLY",
                "PLUGGED",
                "DISABLED",
                "CUSTOMERS",
                "MOTORCYCLES"
              ]
            }
          },
          "images": {
            "type": "array",
            "description": "Links images related to the Charging Station such as photos or logos.",
            "items": { "$ref": "#/components/schemas/Image" }
          },
          "chargingStationName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "If not provided then default value: <charging_station_model> + <identity_key>.If 'charging_station_model' is null, then 'charging_station_name' = 'identity_key'",
            "example": "WallBox NG Pro 1550"
          },
          "chargingStationModel": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "The Charging Station model.",
            "example": "WallBox NG Pro Ultra"
          },
          "csmsUuid": {
            "maxLength": 36,
            "minLength": 0,
            "pattern": "^(?i)[0-9A-F]{8}-[0-9A-F]{4}-[4][0-9A-F]{3}-[89abAB][0-9A-F]{3}-[0-9A-F]{12}$",
            "type": "string",
            "description": "The UUID of the csms",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "chargingStationGroupUuid": {
            "pattern": "^(?i)[0-9A-F]{8}-[0-9A-F]{4}-[4][0-9A-F]{3}-[89abAB][0-9A-F]{3}-[0-9A-F]{12}$",
            "type": "string",
            "description": "The Charging Station Group ID that belongs to the provided Location. If Location ID is null or empty, then this field must be null too.",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          }
        }
      },
      "EvseUpdateRequest": {
        "required": ["connectors", "status"],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates the current status of the EVSE.",
            "enum": [
              "AVAILABLE",
              "BLOCKED",
              "CHARGING",
              "INOPERATIVE",
              "OUTOFORDER",
              "PLANNED",
              "REMOVED",
              "RESERVED",
              "UNKNOWN"
            ]
          },
          "connectors": {
            "type": "array",
            "description": "List of available connectors on the EVSE.",
            "items": { "$ref": "#/components/schemas/Connector" }
          },
          "status_schedule": {
            "type": "array",
            "description": "Indicates a planned status update of the EVSE.",
            "items": { "$ref": "#/components/schemas/StatusSchedule" }
          }
        }
      },
      "ChargingStationGroup": {
        "required": [
          "chargingStationGroupName",
          "chargingStationGroupUuid",
          "locationId",
          "providerId"
        ],
        "type": "object",
        "properties": {
          "chargingStationGroupUuid": {
            "type": "string",
            "description": "This contains the unique Charging Station Group UUID",
            "format": "uuid",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "locationId": {
            "maxLength": 36,
            "minLength": 0,
            "pattern": "^(?i)[0-9A-F]{8}-[0-9A-F]{4}-[4][0-9A-F]{3}-[89abAB][0-9A-F]{3}-[0-9A-F]{12}$",
            "type": "string",
            "description": "This contains the location ID, of the current Charging Station Group.",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "chargingStationGroupName": {
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^[^@#`/%:;,=?^$()#|+~&%{}.!<>\\[\\]\\\\]+?$",
            "type": "string",
            "description": "This contains the Charging Station Group name",
            "example": "Test Group No1"
          },
          "chargingStationIdentityKeys": {
            "type": "array",
            "description": "This contains the Identity Keys of Charging Stations that belong to this Group.",
            "items": {
              "$ref": "#/components/schemas/ChargingStationGroupIdentityKey"
            }
          },
          "providerId": {
            "maxLength": 6,
            "minLength": 6,
            "pattern": "^[A-Z]{2}\\*[0-9A-Z]{3}$",
            "type": "string",
            "description": "This contains the CPO Provider ID.",
            "example": "DE*ERG"
          }
        }
      },
      "ChargingStationGroupIdentityKey": {
        "type": "object",
        "properties": { "identityKey": { "type": "string" } },
        "description": "This contains the Identity Keys of Charging Stations that belong to this Group."
      },
      "ChargingStationGroupUpdateRequest": {
        "required": ["chargingStationGroupName"],
        "type": "object",
        "properties": {
          "chargingStationGroupName": {
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^[^@#`/%:;,=?^$()#|+~&%{}.!<>\\[\\]\\\\]+?$",
            "type": "string",
            "description": "This contains the Charging Station Group name",
            "example": "Test Updated Group Name"
          }
        }
      },
      "Csms": {
        "required": ["csmsUrl", "displayName", "isDefault", "uuid"],
        "type": "object",
        "properties": {
          "uuid": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Unique Id of the CSMS, used for external identifier.",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "displayName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Unique CSMS display name",
            "example": "EnergyStacks CSMS"
          },
          "csmsUrl": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "CSMS URL",
            "example": "wss://csms.energystacks.io/ocpp/"
          },
          "isDefault": {
            "type": "boolean",
            "description": "Identifies if the current CSMS is the default one or not",
            "example": false
          }
        }
      },
      "CsmsUpdateRequest": {
        "required": ["csmsUrl", "displayName", "isDefault"],
        "type": "object",
        "properties": {
          "displayName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Unique CSMS display name",
            "example": "EnergyStacks CSMS_2"
          },
          "csmsUrl": {
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^(ws:\\/\\/|wss:\\/\\/)+[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z0-9]{2,5}(:[0-9]{1,5})?(\\/.*)?$",
            "type": "string",
            "description": "CSMS URL",
            "example": "wss://csms.energystacks.io/ocpp/"
          },
          "isDefault": {
            "type": "boolean",
            "description": "Identifies if the current CSMS is the default one or not",
            "example": false
          }
        }
      },
      "SuccessMessageDto": {
        "type": "object",
        "properties": { "success": { "type": "boolean" } }
      },
      "CsmsTokenCreateRequest": {
        "required": [
          "expiry_date",
          "issuer",
          "type",
          "uid",
          "valid",
          "whitelist"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of token\n * <p>\n * NOTE: The eMSP is RECOMMENDED to push Tokens with type: AD_HOC_USER or APP_USER with whitelist set to\n * NEVER. Whitelists are very useful for RFID type Tokens, but the AD_HOC_USER/APP_USER Tokens are used to\n * start Sessions from an App etc. so whitelisting them has no advantages.\n * </p>",
            "example": "RFID",
            "enum": ["AD_HOC_USER", "APP_USER", "OTHER", "RFID"]
          },
          "issuer": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Issuing company, most of the times the name of the company printed on the token (RFID card), not necessarily the eMSP.",
            "example": "TheNewMotion"
          },
          "whitelist": {
            "type": "string",
            "description": "Indicates what type of white-listing is allowed.",
            "example": "ALLOWED",
            "enum": ["ALWAYS", "ALLOWED", "ALLOWED_OFFLINE", "NEVER"]
          },
          "uid": {
            "maxLength": 36,
            "minLength": 0,
            "pattern": "^[^@#`/%:;,=?^$()#|+~&%{}.!<>\\[\\]\\\\]+?$",
            "type": "string",
            "description": "Unique ID by which this Token can be identified. This is the field used by CPO system (RFID reader on the Charge Point) to identify this token. Currently, in most cases: type=RFID, this is the RFID hidden ID as read by the RFID reader, but that is not a requirement. If this is a APP_USER or AD_HOC_USER Token, it will be a uniquely, by the eMSP, generated ID. This field is named uid instead of id to prevent confusion with: contract_id.",
            "example": "08a8c5d2f13b9100"
          },
          "visual_number": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Visual readable number/identification as printed on the Token (RFID card), might be equal to the contract_id.",
            "example": "DF000-2001-8999-1"
          },
          "group_id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "This ID groups a couple of tokens. This can be used to make two or more tokens work as one, so that a session can be started with one token and stopped with another, handy when a card and key-fob are given to the EV-driver. Beware that OCPP 1.5/1.6 only support group_ids (it is called parentId in OCPP 1.5/1.6) with a maximum length of 20.",
            "example": "DF000-2001-8999"
          },
          "valid": { "type": "boolean", "description": "Is this Token valid" },
          "expiry_date": {
            "type": "string",
            "description": "Timestamp when this Token expires.",
            "format": "date-time"
          }
        }
      },
      "CsmsProviderCreateRequest": {
        "required": ["providerId", "providerName"],
        "type": "object",
        "properties": {
          "providerName": {
            "pattern": "^[^@#`/%:;,=?^$()#|+~&%{}.!<>\\[\\]\\\\]+?$",
            "type": "string",
            "description": "The Name of the Provider",
            "example": "energy stacks CPO"
          },
          "providerId": {
            "pattern": "^[A-Z]{2}\\*[0-9A-Z]{3}$",
            "type": "string",
            "description": "The provider ID",
            "example": "DE*ERG"
          }
        }
      },
      "UnlockConnectorConfirmation": {
        "required": ["status"],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "This indicates whether the Charge Point has unlocked the connector.",
            "enum": ["Unlocked", "UnlockFailed", "NotSupported"]
          }
        }
      },
      "UnlockConnectorRequest": {
        "required": ["connectorId"],
        "type": "object",
        "properties": {
          "connectorId": {
            "type": "integer",
            "description": "This contains the identifier of the connector to be unlocked.",
            "format": "int32"
          }
        }
      },
      "ResetConfirmation": {
        "required": ["status"],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "This indicates whether the Charge Point is able to perform the reset.",
            "enum": ["Accepted", "Rejected"]
          }
        }
      },
      "ResetRequest": {
        "required": ["type"],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This contains the type of reset that the Charge Point should perform.",
            "enum": ["Hard", "Soft"]
          }
        }
      },
      "RemoteStopTransactionConfirmation": {
        "required": ["status"],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status indicating whether Charge Point accepts the request to stop a transaction.",
            "enum": ["Accepted", "Rejected"]
          }
        }
      },
      "RemoteStopTransactionRequest": {
        "required": ["transactionId"],
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "integer",
            "description": "This contains the identifier of the transaction which Charge Point is requested to stop.",
            "format": "int32"
          }
        }
      },
      "RemoteStartTransactionConfirmation": {
        "required": ["status"],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status indicating whether Charge Point accepts the request to start a transaction.",
            "enum": ["Accepted", "Rejected"]
          }
        }
      },
      "OcppChargingProfile": {
        "required": [
          "chargingProfileId",
          "chargingProfileKind",
          "chargingProfilePurpose",
          "chargingSchedule",
          "stackLevel"
        ],
        "type": "object",
        "properties": {
          "chargingProfileId": {
            "type": "integer",
            "description": "Unique identifier for this profile.",
            "format": "int32"
          },
          "transactionId": {
            "type": "integer",
            "description": "Only valid if ChargingProfilePurpose is set to TxProfile, the transactionId MAY be used to match the profile to a specific transaction.",
            "format": "int32"
          },
          "stackLevel": {
            "minimum": 0,
            "type": "integer",
            "description": "Value determining level in hierarchy stack of profiles. Higher values have precedence over lower values. Lowest level is 0.",
            "format": "int32"
          },
          "chargingProfilePurpose": {
            "type": "string",
            "enum": ["ChargePointMaxProfile", "TxDefaultProfile", "TxProfile"]
          },
          "chargingProfileKind": {
            "type": "string",
            "description": "Indicates the kind of schedule.",
            "enum": ["Absolute", "Recurring", "Relative"]
          },
          "recurrencyKind": {
            "type": "string",
            "description": "Indicates the start point of a recurrence. SHALL only be used when the field: recurrencyKind is set to: Recurring.",
            "enum": ["Daily", "Weekly"]
          },
          "validFrom": {
            "type": "string",
            "description": "Point in time at which the profile starts to be valid. If absent, the profile is valid as soon as it is received by the Charge Point.",
            "format": "date-time"
          },
          "validTo": {
            "type": "string",
            "description": "Point in time at which the profile stops to be valid. If absent, the profile is valid until it is replaced by another profile.",
            "format": "date-time"
          },
          "chargingSchedule": {
            "$ref": "#/components/schemas/OcppChargingSchedule"
          }
        },
        "description": "Charging Profile to be used by the Charge Point for the requested transaction. ChargingProfilePurpose MUST be set to TxProfile"
      },
      "OcppChargingSchedule": {
        "required": ["chargingRateUnit", "chargingSchedulePeriod"],
        "type": "object",
        "properties": {
          "duration": {
            "type": "integer",
            "description": "Duration of the charging schedule in seconds. If the duration is left empty, the last period will continue indefinitely or until end of the transaction in case startSchedule is absent.",
            "format": "int32"
          },
          "startSchedule": {
            "type": "string",
            "description": "Starting point of an absolute schedule. If absent the schedule will be relative to start of charging. When ChargingSchedule is used as part of a GetCompositeSchedule.conf message, then this field must be omitted.",
            "format": "date-time"
          },
          "chargingRateUnit": {
            "type": "string",
            "description": "The unit of measure Limit is expressed in.",
            "enum": ["W", "A"]
          },
          "chargingSchedulePeriod": {
            "type": "array",
            "description": "List of ChargingSchedulePeriod elements defining maximum power or current usage over time. The startPeriod of the first ChargingSchedulePeriod SHALL always be 0.",
            "items": {
              "$ref": "#/components/schemas/OcppChargingSchedulePeriod"
            }
          },
          "minChargingRate": {
            "type": "number",
            "description": "Minimum charging rate supported by the electric vehicle. The unit of measure is defined by the chargingRateUnit. This parameter is intended to be used by a local smart charging algorithm to optimize the power allocation for in the case a charging process is inefficient at lower charging rates. Accepts at most one digit fraction (e.g. 8.1)",
            "example": 8.1
          }
        },
        "description": "Contains limits for the available power or current over time."
      },
      "OcppChargingSchedulePeriod": {
        "required": ["limit", "startPeriod"],
        "type": "object",
        "properties": {
          "startPeriod": {
            "type": "integer",
            "description": "Start of the period, in seconds from the start of schedule. The value of StartPeriod also defines the stop time of the previous period.",
            "format": "int32"
          },
          "limit": {
            "type": "number",
            "description": "Charging rate limit during the schedule period, in the applicable chargingRateUnit, for example in Amperes or Watts. Accepts at most one digit fraction (e.g. 8.1).",
            "example": 8.1
          },
          "numberPhases": {
            "type": "integer",
            "description": "The number of phases that can be used for charging. If a number of phases is needed, numberPhases=3 will be assumed unless another number is given.",
            "format": "int32"
          }
        },
        "description": "List of ChargingSchedulePeriod elements defining maximum power or current usage over time. The startPeriod of the first ChargingSchedulePeriod SHALL always be 0."
      },
      "RemoteStartTransactionRequest": {
        "required": ["idTag"],
        "type": "object",
        "properties": {
          "connectorId": {
            "type": "integer",
            "description": "Number of the connector on which to start the transaction. connectorId SHALL be > 0.",
            "format": "int32"
          },
          "idTag": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "The identifier that Charge Point must use to start a transaction. Case-insensitive, max length 20. idTag of vehicle owner"
          },
          "chargingProfile": {
            "$ref": "#/components/schemas/OcppChargingProfile"
          }
        }
      },
      "ChangeConfigurationConfirmation": {
        "required": ["status"],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Returns whether configuration change has been accepted.",
            "enum": ["Accepted", "Rejected", "RebootRequired", "NotSupported"]
          }
        }
      },
      "ChangeConfigurationRequest": {
        "required": ["key", "value"],
        "type": "object",
        "properties": {
          "key": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The name of the configuration setting to change. See for standard configuration key names and associated values. Case-insensitive, max length 50."
          },
          "value": {
            "maxLength": 500,
            "minLength": 0,
            "type": "string",
            "description": "The new value as string for the setting. See for standard configuration key names and associated values. Case-insensitive, max length 500."
          }
        }
      },
      "ChangeAvailabilityConfirmation": {
        "required": ["status"],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "This indicates whether the Charge Point is able to perform the availability change.",
            "enum": ["Accepted", "Rejected", "Scheduled"]
          }
        }
      },
      "ChangeAvailabilityRequest": {
        "required": ["connectorId", "type"],
        "type": "object",
        "properties": {
          "connectorId": {
            "minimum": 0,
            "type": "integer",
            "description": "The id of the connector for which availability needs to change. Id '0' (zero) is used if the availability of the Charge Point and all its connectors needs to change.",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "description": "This contains the type of availability change that the Charge Point should perform.",
            "enum": ["Inoperative", "Operative"]
          }
        }
      },
      "LocationAndChargingStationGroups": {
        "required": ["chargingStationGroups", "chargingStationLocation"],
        "type": "object",
        "properties": {
          "chargingStationLocation": {
            "$ref": "#/components/schemas/ChargingStationLocation"
          },
          "chargingStationGroups": {
            "type": "array",
            "description": "Contains details of Charging Station Group(s) that belong to this Location.",
            "items": { "$ref": "#/components/schemas/ChargingStationGroup" }
          }
        },
        "description": "DTO for a Location and a List of Charging Station Groups, that are assigned to it."
      },
      "ChargingStationGroupCreateRequest": {
        "required": ["chargingStationGroupName"],
        "type": "object",
        "properties": {
          "chargingStationGroupName": {
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^[^@#`/%:;,=?^$()#|+~&%{}.!<>\\[\\]\\\\]+?$",
            "type": "string",
            "description": "This contains the Charging Station Group name",
            "example": "Test Group No1"
          }
        },
        "description": "This contains the Create Request of Charging Station Group(s)"
      },
      "LocationAndChargingStationGroupsCreateRequest": {
        "required": [
          "chargingStationGroupCreateRequests",
          "locationCreateRequest"
        ],
        "type": "object",
        "properties": {
          "locationCreateRequest": {
            "$ref": "#/components/schemas/LocationCreateRequest"
          },
          "chargingStationGroupCreateRequests": {
            "type": "array",
            "description": "This contains the Create Request of Charging Station Group(s)",
            "items": {
              "$ref": "#/components/schemas/ChargingStationGroupCreateRequest"
            }
          }
        },
        "description": "Create request to add new Location and also Charging Station Groups for it"
      },
      "LocationCreateRequest": {
        "required": ["address", "city", "country"],
        "type": "object",
        "properties": {
          "publish": {
            "type": "boolean",
            "description": "Defines if a Location may be published on an website or app etc.When this is set to false, only tokens identified in the field: publish_allowed_to are allowed to beshown this Location. When the same location has EVSEs that may be published and may not be published, two 'Locations' should be created.",
            "nullable": true
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Display name of the location.",
            "nullable": true
          },
          "address": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "Street/block name and house number if available."
          },
          "city": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "City or town."
          },
          "state": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "State or province of the location, only to be used when relevant.",
            "nullable": true
          },
          "country": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "ISO 3166-1 alpha-3 code for the country of this location.",
            "example": "DEU"
          },
          "coordinates": { "$ref": "#/components/schemas/GeoLocation" },
          "directions": {
            "type": "array",
            "description": "Human-readable directions on how to reach the location.",
            "nullable": true,
            "items": { "$ref": "#/components/schemas/DisplayText" }
          },
          "operator": { "$ref": "#/components/schemas/BusinessDetails" },
          "suboperator": { "$ref": "#/components/schemas/BusinessDetails" },
          "owner": { "$ref": "#/components/schemas/BusinessDetails" },
          "facilities": {
            "type": "array",
            "description": "Optional list of facilities this charging location directly belongs to.",
            "nullable": true,
            "items": {
              "type": "string",
              "description": "Optional list of facilities this charging location directly belongs to.",
              "nullable": true,
              "enum": [
                "HOTEL",
                "RESTAURANT",
                "CAFE",
                "MALL",
                "SUPERMARKET",
                "SPORT",
                "RECREATION_AREA",
                "NATURE",
                "MUSEUM",
                "BIKE_SHARING",
                "BUS_STOP",
                "TAXI_STAND",
                "TRAM_STOP",
                "METRO_STATION",
                "TRAIN_STATION",
                "AIRPORT",
                "PARKING_LOT",
                "CARPOOL_PARKING",
                "FUEL_STATION",
                "WIFI"
              ]
            }
          },
          "images": {
            "type": "array",
            "description": "Links to images related to the location such as photos or logos.",
            "nullable": true,
            "items": { "$ref": "#/components/schemas/Image" }
          },
          "postal_code": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Postal code of the location, may only be omitted when the location has no postal code: in some countries charging locations at highways don’t have postal codes.",
            "nullable": true
          },
          "related_locations": {
            "type": "array",
            "description": "Geographical location of related points relevant to the user.",
            "nullable": true,
            "items": { "$ref": "#/components/schemas/AdditionalGeoLocation" }
          },
          "parking_type": {
            "type": "string",
            "description": "The general type of parking at the charge point location.",
            "nullable": true,
            "example": "ON_STREET",
            "enum": [
              "ALONG_MOTORWAY",
              "PARKING_GARAGE",
              "PARKING_LOT",
              "ON_DRIVEWAY",
              "ON_STREET",
              "UNDERGROUND_GARAGE"
            ]
          },
          "time_zone": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "One of IANA tzdata’s TZ-values representing the time zone of the location.For example: \"Europe/Oslo\", \"Europe/Zurich\". (http://www.iana.org/time-zones)",
            "nullable": true,
            "example": "Europe/Oslo"
          },
          "opening_times": { "$ref": "#/components/schemas/Hours" },
          "charging_when_closed": {
            "type": "boolean",
            "description": "Indicates if the EVSEs are still charging outside the opening hours of the location. E.g. when the parking garage closes its barriers over night, is it allowed to charge till the next morning? Default: true",
            "nullable": true
          },
          "energy_mix": { "$ref": "#/components/schemas/EnergyMix" }
        },
        "description": "The Location object describes the location and its properties where a group of EVSEsthat belong together are installed. Typically, the Location object is the exact location of the group of EVSEs,but it can also be the entrance of a parking garage which contains these EVSEs.The exact way to reach each EVSE can be further specified by its own properties."
      },
      "CsmsChargingStationCreateRequest": {
        "required": ["evses", "identityKey"],
        "type": "object",
        "properties": {
          "identityKey": {
            "maxLength": 32,
            "minLength": 0,
            "pattern": "^[^@#`/%:;,=?^$()#|+~&%{}.!<>\\[\\]\\\\]+?$",
            "type": "string",
            "description": "This contains the identity key of the Charging Station.",
            "example": "ACE324452"
          },
          "locationId": {
            "type": "string",
            "description": "This contains the location id of the Charging Station."
          },
          "evses": {
            "type": "array",
            "description": "Identifies the list of the evses inside the Charging Station.",
            "items": { "$ref": "#/components/schemas/EvseCreateRequest" }
          },
          "operationalStatus": {
            "type": "string",
            "description": "This contains the operational status of the Charging Station.",
            "example": "AVAILABLE",
            "enum": ["AVAILABLE", "BLOCKED", "CHARGING", "OUTOFORDER"]
          },
          "communicationType": {
            "type": "string",
            "description": "This contains the communication type of the Charging Station.",
            "example": "WiFi",
            "enum": ["WiFi", "LTE", "Ethernet"]
          },
          "installationDate": {
            "type": "string",
            "description": "This contains the installation Date of the Charging Station.",
            "format": "date-time"
          },
          "contactPerson": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "This contains the installation contract person of the Charging Station."
          },
          "loadManagementAvailable": {
            "type": "boolean",
            "description": "This contains if the load management is available in the Charging Station.",
            "example": true
          },
          "calibrationLawCompliant": {
            "type": "boolean",
            "description": "This contains if the Charging Station is law compliant.",
            "example": true
          },
          "authenticationMethods": {
            "type": "array",
            "description": "This contains the authentication methods of the Charging Station.",
            "items": {
              "type": "string",
              "description": "This contains the authentication methods of the Charging Station.",
              "enum": ["RFID", "APP", "ISO15118"]
            }
          },
          "capabilities": {
            "type": "array",
            "description": "List of functionalities that Charging Station is capable of",
            "items": {
              "type": "string",
              "description": "List of functionalities that Charging Station is capable of",
              "enum": [
                "CHARGING_PROFILE_CAPABLE",
                "CHARGING_PREFERENCES_CAPABLE",
                "CHIP_CARD_SUPPORT",
                "CONTACTLESS_CARD_SUPPORT",
                "CREDIT_CARD_PAYABLE",
                "DEBIT_CARD_PAYABLE",
                "PED_TERMINAL",
                "REMOTE_START_STOP_CAPABLE",
                "RESERVABLE",
                "RFID_READER",
                "TOKEN_GROUP_CAPABLE",
                "UNLOCK_CAPABLE",
                "START_SESSION_CONNECTOR_REQUIRED"
              ]
            }
          },
          "floorLevel": {
            "maxLength": 4,
            "minLength": 0,
            "type": "string",
            "description": "Level on which the Charge Point is located (in garage buildings) in the locally displayed numbering scheme.",
            "example": "2"
          },
          "coordinates": { "$ref": "#/components/schemas/GeoLocation" },
          "physicalReference": {
            "maxLength": 16,
            "minLength": 0,
            "type": "string",
            "description": "A number/string printed on the outside of the Charging Station for visual identification.",
            "example": "WB123AE2"
          },
          "directions": {
            "type": "array",
            "description": "Multi-language human-readable directions when more detailed information on how to reach the Charging Station from the Location is required.",
            "items": { "$ref": "#/components/schemas/DisplayText" }
          },
          "parkingRestrictions": {
            "type": "array",
            "description": "The restrictions that apply to the parking spot.",
            "items": {
              "type": "string",
              "description": "The restrictions that apply to the parking spot.",
              "enum": [
                "EV_ONLY",
                "PLUGGED",
                "DISABLED",
                "CUSTOMERS",
                "MOTORCYCLES"
              ]
            }
          },
          "images": {
            "type": "array",
            "description": "Links images related to the Charging Station such as photos or logos.",
            "items": { "$ref": "#/components/schemas/Image" }
          },
          "chargingStationName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "If not provided then default value: <charging_station_model> + <identity_key>.If 'charging_station_model' is null, then 'charging_station_name' = 'identity_key'",
            "example": "WallBox NG Pro 1550"
          },
          "chargingStationVendor": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string"
          },
          "chargingStationModel": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "The Charging Station model.",
            "example": "WallBox NG Pro"
          },
          "userName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The basic auth user name",
            "example": "acc-21107439"
          },
          "password": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The basic auth password",
            "example": "myS3cR3tPass|||0Rd"
          },
          "ocppProtocolVersion": {
            "type": "string",
            "description": "The OCPP protocol version which should be negotiated during the handshake.",
            "example": "V_16",
            "default": "V_16",
            "enum": ["V_15", "V_16", "V_20"]
          },
          "csmsUuid": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "The UUID of the csms",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "chargingStationGroupUuid": {
            "pattern": "^(?i)[0-9A-F]{8}-[0-9A-F]{4}-[4][0-9A-F]{3}-[89abAB][0-9A-F]{3}-[0-9A-F]{12}$",
            "type": "string",
            "description": "The Charging Station Group ID that belongs to the provided Location. If Location ID is null or empty, then this field must be null too.",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          }
        }
      },
      "EvseCreateRequest": {
        "required": ["connectors"],
        "type": "object",
        "properties": {
          "connectors": {
            "type": "array",
            "description": "List of available connectors on the EVSE.",
            "items": { "$ref": "#/components/schemas/Connector" }
          },
          "evseId": {
            "maxLength": 48,
            "minLength": 0,
            "pattern": "^(?i)[A-Z]{2}\\*[0-9a-zA-Z]{3}\\*E([0-9a-zA-Z]{4}|[0-9a-zA-Z]{5})\\*([0-9a-zA-Z])+$",
            "type": "string",
            "description": "Identifies the evse id, if empty it will be auto generated",
            "example": "GR*ATH*E1235*99999"
          },
          "status_schedule": {
            "type": "array",
            "description": "Indicates a planned status update of the EVSE.",
            "items": { "$ref": "#/components/schemas/StatusSchedule" }
          }
        },
        "description": "Identifies the list of the evses inside the Charging Station."
      },
      "CsmsChargingStationGroupCreateRequest": {
        "required": ["chargingStationGroupCreateRequests", "locationId"],
        "type": "object",
        "properties": {
          "chargingStationGroupCreateRequests": {
            "type": "array",
            "description": "This contains the Create Request of Charging Station Group(s)",
            "items": {
              "$ref": "#/components/schemas/ChargingStationGroupCreateRequest"
            }
          },
          "locationId": {
            "maxLength": 36,
            "minLength": 0,
            "pattern": "^(?i)[0-9A-F]{8}-[0-9A-F]{4}-[4][0-9A-F]{3}-[89abAB][0-9A-F]{3}-[0-9A-F]{12}$",
            "type": "string",
            "description": "This contains the location ID, of the Charging Station Group(s).",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          }
        },
        "description": "Create request to add new Charging Station Groups, and assign them to an existing Location."
      },
      "CsmsCreateRequest": {
        "required": ["csmsUrl", "displayName", "isDefault"],
        "type": "object",
        "properties": {
          "displayName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Unique CSMS display name",
            "example": "EnergyStacks CSMS"
          },
          "csmsUrl": {
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^(ws:\\/\\/|wss:\\/\\/)+[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z0-9]{2,5}(:[0-9]{1,5})?(\\/.*)?$",
            "type": "string",
            "description": "CSMS URL",
            "example": "wss://csms.energystacks.io/ocpp/"
          },
          "isDefault": {
            "type": "boolean",
            "description": "Identifies if the current CSMS is the default one or not",
            "example": false
          }
        }
      },
      "CsmsUserDto": {
        "type": "object",
        "properties": {
          "providerId": {
            "type": "string",
            "description": "The provider ID",
            "example": "DE*ERG"
          },
          "userRole": {
            "type": "string",
            "description": "The assigned user role",
            "example": "CPO_USER",
            "enum": [
              "SUPER_ADMIN",
              "CPO_ADMIN",
              "CPO_USER",
              "CPO_SUB_OPERATOR_USER"
            ]
          },
          "isActive": {
            "type": "boolean",
            "description": "Indicates if the user account is active",
            "example": true
          },
          "emailAddress": {
            "type": "string",
            "description": "The email address of the user",
            "example": "john.doe@energystacks.io"
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the user",
            "example": "John Doe"
          }
        }
      },
      "Pageable": {
        "type": "object",
        "properties": {
          "page": { "minimum": 0, "type": "integer", "format": "int32" },
          "size": { "minimum": 1, "type": "integer", "format": "int32" },
          "sort": { "type": "array", "items": { "type": "string" } }
        }
      },
      "OcppMessageLogEntry": {
        "type": "object",
        "properties": {
          "messageUuid": {
            "type": "string",
            "description": "The UUID of the OCPP message",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "identityKey": {
            "type": "string",
            "description": "The Charging Station Identity Key",
            "example": "ACE12578"
          },
          "timestamp": {
            "type": "string",
            "description": "The date and time of the OCPP message",
            "format": "date-time",
            "example": "2021-03-19T14:11:43Z"
          },
          "messageDirection": {
            "type": "string",
            "description": "The message direction",
            "example": "CP_2_CS",
            "enum": ["CS_2_CSMS", "CSMS_2_CS"]
          },
          "messageType": {
            "type": "string",
            "description": "The OCPP message type",
            "example": "CALL",
            "enum": ["CALL", "CALL_RESULT", "CALL_ERROR"]
          },
          "procedureName": {
            "type": "string",
            "description": "The name of the OCPP procedure or action",
            "example": "BootNotification",
            "enum": [
              "Authorize",
              "BootNotification",
              "CancelReservation",
              "ChangeAvailability",
              "ChangeConfiguration",
              "ClearCache",
              "ClearChargingProfile",
              "DataTransfer",
              "DiagnosticsStatusNotification",
              "FirmwareStatusNotification",
              "GetConfiguration",
              "GetDiagnostics",
              "GetLocalListVersion",
              "Heartbeat",
              "MeterValues",
              "RemoteStartTransaction",
              "RemoteStopTransaction",
              "ReserveNow",
              "Reset",
              "SendLocalList",
              "SetChargingProfile",
              "StartTransaction",
              "StopTransaction",
              "StatusNotification",
              "UnlockConnector",
              "UpdateFirmware",
              "TriggerMessage"
            ]
          },
          "callId": {
            "type": "string",
            "description": "The unique identifier for matching request and result",
            "example": "19225418"
          },
          "payload": {
            "type": "string",
            "description": "The JSON payload of the message"
          },
          "rawMessage": {
            "type": "string",
            "description": "The raw message which was transported over the WebSocket"
          }
        }
      },
      "PageOcppMessageLogEntry": {
        "type": "object",
        "properties": {
          "totalElements": { "type": "integer", "format": "int64" },
          "totalPages": { "type": "integer", "format": "int32" },
          "sort": { "$ref": "#/components/schemas/SortObject" },
          "first": { "type": "boolean" },
          "last": { "type": "boolean" },
          "size": { "type": "integer", "format": "int32" },
          "content": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/OcppMessageLogEntry" }
          },
          "number": { "type": "integer", "format": "int32" },
          "numberOfElements": { "type": "integer", "format": "int32" },
          "pageable": { "$ref": "#/components/schemas/PageableObject" },
          "empty": { "type": "boolean" }
        }
      },
      "PageableObject": {
        "type": "object",
        "properties": {
          "sort": { "$ref": "#/components/schemas/SortObject" },
          "offset": { "type": "integer", "format": "int64" },
          "pageNumber": { "type": "integer", "format": "int32" },
          "pageSize": { "type": "integer", "format": "int32" },
          "paged": { "type": "boolean" },
          "unpaged": { "type": "boolean" }
        }
      },
      "SortObject": {
        "type": "object",
        "properties": {
          "empty": { "type": "boolean" },
          "sorted": { "type": "boolean" },
          "unsorted": { "type": "boolean" }
        }
      },
      "GetConfigurationConfirmation": {
        "type": "object",
        "properties": {
          "configurationKey": {
            "type": "array",
            "description": "List of requested or known keys.",
            "items": { "$ref": "#/components/schemas/OcppKeyValue" }
          },
          "unknownKey": {
            "type": "array",
            "description": "Requested keys that are unknown. Keys are case-insensitive, with max length = 50.",
            "items": {
              "type": "string",
              "description": "Requested keys that are unknown. Keys are case-insensitive, with max length = 50."
            }
          }
        }
      },
      "OcppKeyValue": {
        "required": ["key", "readonly"],
        "type": "object",
        "properties": {
          "key": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Case-insensitive, max length 50."
          },
          "readonly": {
            "type": "boolean",
            "description": "False if the value can be set with the ChangeConfiguration message."
          },
          "value": {
            "maxLength": 500,
            "minLength": 0,
            "type": "string",
            "description": "If key is known but not set, this field may be absent. Case-insensitive, max length 500."
          }
        },
        "description": "List of requested or known keys."
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "Bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
